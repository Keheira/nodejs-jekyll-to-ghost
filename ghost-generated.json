{"data":{"posts":[{"id":1,"uuid":"15ca8ec1-4c04-4e00-8b20-f1d8ecfd4675","title":"First things first.","slug":"first-things-first","markdown":"\r\n \r\nSince I started to work as a Front End Developer I've been studying and learning new things every single day and I think now it's a good time to start share my humble knowledge and other main reason is that I haven't studying English (Yes..shame on me!) just technical/theory stuff. <br>\r\nAh I moved from Brazil to US months ago and I want to make my English even better than my Portuguese.\r\n\r\nSo read in English is very common for me but now I need to make my mind think as a native American (I'm half American by the way but I lived in Brazil for 21 years) explore new words therefore what is the best way to explore those words than practice writing a blog.\r\n\r\ntriple win here. I will practice my English, keep learning technical stuff and share some knowledge :)\r\n\r\nSo please be patient and feel free to contribute. <br>\r\nthanks.\r\n\r\n","html":"<p>Since I started to work as a Front End Developer I&#39;ve been studying and learning new things every single day and I think now it&#39;s a good time to start share my humble knowledge and other main reason is that I haven&#39;t studying English (Yes..shame on me!) just technical/theory stuff. &lt;br&gt;\nAh I moved from Brazil to US months ago and I want to make my English even better than my Portuguese.</p>\n\n<p>So read in English is very common for me but now I need to make my mind think as a native American (I&#39;m half American by the way but I lived in Brazil for 21 years) explore new words therefore what is the best way to explore those words than practice writing a blog.</p>\n\n<p>triple win here. I will practice my English, keep learning technical stuff and share some knowledge :)</p>\n\n<p>So please be patient and feel free to contribute. &lt;br&gt;\nthanks.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"First things first.","meta_description":"Hi there! This is my first post at all and I will try explain shortly why I decided to change my portfolio to a hybrid?!.","author_id":1},{"id":2,"uuid":"cc7146c3-8278-4091-bf10-d7bdd5f3b233","title":"What technologies I'm using to blog?!","slug":"what-technologies-im-using-to-blog","markdown":"\n\nI needed a new look and as I said in my last (first) post I love to learn and experiment new things and at the same time I'm not very fan of Wordpress as a developer point of view either. <br>\nI agree it is a good CMS/Blog Tool that helps us delivery great products in short time for clients therefore it's good for business but Wordpress \"themes\" has a bunch of ugly, messy code and sometimes happens to be infected by other plugins/scripts causing headaches or even worst.\n\n## Long story short\n\n<p>\nI started looking for something more elegant that I could use git to deploy\nSo I tried Github Pages and Jekyll a \"blog-aware, static site generator in Ruby\" that uses Liquid template to process the templates.\nBut I would do experiments with Node.js and Ruby someday so I choose <a href=\"http://www.heroku.com\" title=\"Heroku\" target=\"_blank\">Heroku</a> (cloud application platform for build, deploy, and run cloud apps using Ruby, Node.js, Clojure, Java, Python and Scala).\n</p>\n\nI Can run and test locally, pretty simple.\n<pre><code data-language=\"ruby\">\nforeman start\n</code></pre>\n\nAnd After see my changes I want to deploy directly to my cloud.\n\n<pre><code data-language=\"ruby\">\ngit add .\ngit commit -m \"my message\"\ngit push origin master\n</code></pre>\nDone! Beautiful! Everything up and running.\n\n### In the Back-End\n- Heroku Server (AWESOME cloud application platform).\n- Ruby (Jekyll, liquid template).\n- Git to deploy to my Heroku Cloud.\n\n### In the Front-End\n- HTML5 (Markup).\n- CSS3 (SASS/COMPASS) Modular Development Based.\n- Responsive Design.\n- JS (jQuery).\n- Markdown (Blogging).\n- Disqus (comments).\n\nI may do a better explanation how it works further on but for now I need some posts.","html":"<p>I needed a new look and as I said in my last (first) post I love to learn and experiment new things and at the same time I&#39;m not very fan of Wordpress as a developer point of view either. &lt;br&gt;\nI agree it is a good CMS/Blog Tool that helps us delivery great products in short time for clients therefore it&#39;s good for business but Wordpress &quot;themes&quot; has a bunch of ugly, messy code and sometimes happens to be infected by other plugins/scripts causing headaches or even worst.</p>\n\n<h2>Long story short</h2>\n\n<p>&lt;p&gt;\nI started looking for something more elegant that I could use git to deploy\nSo I tried Github Pages and Jekyll a &quot;blog-aware, static site generator in Ruby&quot; that uses Liquid template to process the templates.\nBut I would do experiments with Node.js and Ruby someday so I choose &lt;a href=&quot;http://www.heroku.com&quot; title=&quot;Heroku&quot; target=&quot;_blank&quot;&gt;Heroku&lt;/a&gt; (cloud application platform for build, deploy, and run cloud apps using Ruby, Node.js, Clojure, Java, Python and Scala).\n&lt;/p&gt;</p>\n\n<p>I Can run and test locally, pretty simple.\n&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nforeman start\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>And After see my changes I want to deploy directly to my cloud.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit add .\ngit commit -m &quot;my message&quot;\ngit push origin master\n&lt;/code&gt;&lt;/pre&gt;\nDone! Beautiful! Everything up and running.</p>\n\n<h3>In the Back-End</h3>\n\n<ul><li>Heroku Server (AWESOME cloud application platform).</li><li>Ruby (Jekyll, liquid template).</li><li>Git to deploy to my Heroku Cloud.</li></ul>\n\n<h3>In the Front-End</h3>\n\n<ul><li>HTML5 (Markup).</li><li>CSS3 (SASS/COMPASS) Modular Development Based.</li><li>Responsive Design.</li><li>JS (jQuery).</li><li>Markdown (Blogging).</li><li>Disqus (comments).</li></ul>\n\n<p>I may do a better explanation how it works further on but for now I need some posts.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"What technologies I'm using to blog?!","meta_description":"I needed a new look and like I said in my last (first) post I love to learn and experiment new things and at the same time I'm not very fan of Wordpress as a developer point of view.","author_id":1},{"id":3,"uuid":"7c218317-4698-4f82-9415-f47358db4e20","title":"Two years ago everything started.","slug":"two-years-ago-everything-started","markdown":"\n\n While I cook my pasta I write this post so I'll be short.\n\nFor my first job I did a test and got my first paid job as a Front End Developer Jr\nIt was hard because we had so many projects and things to do that I wasn't used to (Mostly developers used to get there around 9:30 am and leave around 9:30 pm) I used to get home at 1:00 am so I had time to eat fast, shower and get some rest to another day.\nI had my senior developer supporting and protecting me like a father and I could learn a lot from him not just technical stuff but how to act in certain situations.\n\nAfter 5 months of my hard core work and a lot of growth this same senior developer indicated me to another company DBR.ag to work as a consultant for some months in a big ongoing project at Chamber of Electric Energy Commercialization in Brazil.\nWas I and another two developers working hard to delivery the system on time but at that time was more independent and I could be outstanding helping and making improvements to the client side of the system.\nAfter 4 months working in-site at CCEE we delivered the system and DBR.ag hired me.\nAt the Agency I started to think in process to help our work flow so I suggested and showed why we we should use Control Version(in that case SVN).\nI also developed a simple HTML5 markup framework as a good practice to all developers follow and it was very fun.\nAfter some months HP called us to come back to CCEE and help the JSP developers with client side mostly with JS/jQuery.\n\nThe rest you can guess reading the about me page so let's talk about some other topics now.\n\n## Outdated Developers\n\nI had great senior developers, but all of them had something in common they were kind of outdated about the new stuff and things we could use maybe because of the hard work flow, family, laziness whatever I just know one of the things that makes difference in a great professional to a good one is his ability to make things better not just getting it done but making it better so I put in my head always look for make it better and stay update to new things that could help improve my job.\n\n## How I'm doing it\n\nI'm always evaluating myself and looking new ways to improve myself in being a better professional.\nLately (around 6 months) I discovered the best way \"for me\" to learn better is read as much as I can about something new that I want to learn before actually try it so I will have like an 360 point of view, a better understanding of it.\n\n## Something that I try follow to keep me productive.\n\n<p class=\"ui-txt-01\">\n\t<ul>\n\t\t<li>Know the shortcuts of your tools and use them wisely.</li>\n\t\t<li>Choose some sort of \"Robot mode playlist\" where the songs works just as a background.</li>\n\t\t<li>Keep focus wake up and think about your tasks for the day that you have to get done.</li>\n\t\t<li>First do it, then do it right, then do it better</li>\n\t\t<li>Follow the most active and productive guys in your field, stay updated, read, talk, discuss about it when is possible.</li>\n\t\t<li>Make experiments. Don't have time? make time experiments are very important to expand your view outside of the \"work box\"</li>\n\t</ul>\n</p>\n\nand this work is what keep me awake at night learning new things when everybody else is sleeping.","html":"<p> While I cook my pasta I write this post so I&#39;ll be short.</p>\n\n<p>For my first job I did a test and got my first paid job as a Front End Developer Jr\nIt was hard because we had so many projects and things to do that I wasn&#39;t used to (Mostly developers used to get there around 9:30 am and leave around 9:30 pm) I used to get home at 1:00 am so I had time to eat fast, shower and get some rest to another day.\nI had my senior developer supporting and protecting me like a father and I could learn a lot from him not just technical stuff but how to act in certain situations.</p>\n\n<p>After 5 months of my hard core work and a lot of growth this same senior developer indicated me to another company DBR.ag to work as a consultant for some months in a big ongoing project at Chamber of Electric Energy Commercialization in Brazil.\nWas I and another two developers working hard to delivery the system on time but at that time was more independent and I could be outstanding helping and making improvements to the client side of the system.\nAfter 4 months working in-site at CCEE we delivered the system and DBR.ag hired me.\nAt the Agency I started to think in process to help our work flow so I suggested and showed why we we should use Control Version(in that case SVN).\nI also developed a simple HTML5 markup framework as a good practice to all developers follow and it was very fun.\nAfter some months HP called us to come back to CCEE and help the JSP developers with client side mostly with JS/jQuery.</p>\n\n<p>The rest you can guess reading the about me page so let&#39;s talk about some other topics now.</p>\n\n<h2>Outdated Developers</h2>\n\n<p>I had great senior developers, but all of them had something in common they were kind of outdated about the new stuff and things we could use maybe because of the hard work flow, family, laziness whatever I just know one of the things that makes difference in a great professional to a good one is his ability to make things better not just getting it done but making it better so I put in my head always look for make it better and stay update to new things that could help improve my job.</p>\n\n<h2>How I&#39;m doing it</h2>\n\n<p>I&#39;m always evaluating myself and looking new ways to improve myself in being a better professional.\nLately (around 6 months) I discovered the best way &quot;for me&quot; to learn better is read as much as I can about something new that I want to learn before actually try it so I will have like an 360 point of view, a better understanding of it.</p>\n\n<h2>Something that I try follow to keep me productive.</h2>\n\n<p>&lt;p class=&quot;ui-txt-01&quot;&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;Know the shortcuts of your tools and use them wisely.&lt;/li&gt;\n\t\t&lt;li&gt;Choose some sort of &quot;Robot mode playlist&quot; where the songs works just as a background.&lt;/li&gt;\n\t\t&lt;li&gt;Keep focus wake up and think about your tasks for the day that you have to get done.&lt;/li&gt;\n\t\t&lt;li&gt;First do it, then do it right, then do it better&lt;/li&gt;\n\t\t&lt;li&gt;Follow the most active and productive guys in your field, stay updated, read, talk, discuss about it when is possible.&lt;/li&gt;\n\t\t&lt;li&gt;Make experiments. Don&#39;t have time? make time experiments are very important to expand your view outside of the &quot;work box&quot;&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/p&gt;</p>\n\n<p>and this work is what keep me awake at night learning new things when everybody else is sleeping.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Two years ago everything started.","meta_description":"This is a little history about my journey when two years ago I passed a test and got my first paid job as a Front End Developer Jr.","author_id":1},{"id":4,"uuid":"ff2927df-e3b0-4a22-b947-f92f8085c2e8","title":"Let's talk about rem units.","slug":"lets-talk-about-rem-units","markdown":"\n\n## The past/present\nI could talk a lot about all the principal units we have been using but let's get this straight we have been using \"px\" since ever and this approach just doesn't work anymore or scale.\n\n<pre><code data-language=\"css\">\n.parent {\n\tfont-size: 16px;\n}\n\n.child {\n\tfont-size: 12px;\n}\n</code></pre>\n\nNow with the popularity and acceptance of the Responsive Design (web applications accessible in any devices) developers and designers are thinking more about scale things and make it fit to their user's device.\nStyle sheets that use relative units can more easily scale from one device environment to another.\nTherefore we started to scale the font-size transforming pixel in em's using this math child / parent = em's voila!!\n\n<pre><code data-language=\"css\">\n.parent {\n\tfont-size: 16px;\n}\n\n.child {\n\tfont-size: 0.75em; /* 12 / 16 = 0.75 */\n}\n</code></pre>\n\nOh! wait. Do we have to repeat this math going through element parent by element parent to give their child the right em's values? It's hard to believe but yes we do.\n\nNow when your wife, girlfriend, dog (whatever) asked you why you are loosing hair and getting bald that's your answer \"I use px to calculate em's Baby!\"\n\n## The present/future\nBut now (a while ago) the <a href=\"http://www.w3.org/TR/css3-values/#font-relative-lengths\" title=\"W3C spec\" target=\"_blank\">W3C spec</a> added to CSS3 the rem unit that is relative to the document parent (root em).\n\n<pre><code data-language=\"css\">\nhtml {\n\tfont-size: 62.5%;\n}\n\nparent {\n\tfont-size: 1.6rem; /* 16px */\n}\n\nchild {\n\tfont-size: 1.2rem; /* 12px */\n}\n</code></pre>\n\nNo need to go through all your parent doing that math to change their child and the browser support makes us even happier developers <a href=\"http://caniuse.com/rem\" title=\"Can I use rem units?\" target=\"_blank\">caniuse.com/rem</a>\n\n## Browser support\n- IE 9+\n- Firefox 3.6+\n- Chrome 6+\n- Safari 5+\n- Opera 11.6+\n\n## Old browser support\n\n<pre><code data-language=\"css\">\nhtml {\n\tfont-size: 62.5%;\n}\n\nparent {\n\tfont-size: 16px;\n\tfont-size: 1.6rem; /* 16px */\n}\n\nchild {\n\tfont-size: 12px;\n\tfont-size: 1.2rem; /* 12px */\n}\n</code></pre>\n\nLet's go now change all our style sheets and make it good for all users and developers!!\n\n\n","html":"<h2>The past/present</h2>\n\n<p>I could talk a lot about all the principal units we have been using but let&#39;s get this straight we have been using &quot;px&quot; since ever and this approach just doesn&#39;t work anymore or scale.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\n.parent {\n\tfont-size: 16px;\n}</p>\n\n<p>.child {\n\tfont-size: 12px;\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now with the popularity and acceptance of the Responsive Design (web applications accessible in any devices) developers and designers are thinking more about scale things and make it fit to their user&#39;s device.\nStyle sheets that use relative units can more easily scale from one device environment to another.\nTherefore we started to scale the font-size transforming pixel in em&#39;s using this math child / parent = em&#39;s voila!!</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\n.parent {\n\tfont-size: 16px;\n}</p>\n\n<p>.child {\n\tfont-size: 0.75em; /<em> 12 / 16 = 0.75 </em>/\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Oh! wait. Do we have to repeat this math going through element parent by element parent to give their child the right em&#39;s values? It&#39;s hard to believe but yes we do.</p>\n\n<p>Now when your wife, girlfriend, dog (whatever) asked you why you are loosing hair and getting bald that&#39;s your answer &quot;I use px to calculate em&#39;s Baby!&quot;</p>\n\n<h2>The present/future</h2>\n\n<p>But now (a while ago) the &lt;a href=&quot;http://www.w3.org/TR/css3-values/#font-relative-lengths&quot; title=&quot;W3C spec&quot; target=&quot;_blank&quot;&gt;W3C spec&lt;/a&gt; added to CSS3 the rem unit that is relative to the document parent (root em).</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\nhtml {\n\tfont-size: 62.5%;\n}</p>\n\n<p>parent {\n\tfont-size: 1.6rem; /<em> 16px </em>/\n}</p>\n\n<p>child {\n\tfont-size: 1.2rem; /<em> 12px </em>/\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>No need to go through all your parent doing that math to change their child and the browser support makes us even happier developers &lt;a href=&quot;http://caniuse.com/rem&quot; title=&quot;Can I use rem units?&quot; target=&quot;_blank&quot;&gt;caniuse.com/rem&lt;/a&gt;</p>\n\n<h2>Browser support</h2>\n\n<ul><li>IE 9+</li><li>Firefox 3.6+</li><li>Chrome 6+</li><li>Safari 5+</li><li>Opera 11.6+</li></ul>\n\n<h2>Old browser support</h2>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\nhtml {\n\tfont-size: 62.5%;\n}</p>\n\n<p>parent {\n\tfont-size: 16px;\n\tfont-size: 1.6rem; /<em> 16px </em>/\n}</p>\n\n<p>child {\n\tfont-size: 12px;\n\tfont-size: 1.2rem; /<em> 12px </em>/\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Let&#39;s go now change all our style sheets and make it good for all users and developers!!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Let's talk about rem units.","meta_description":"I think choose the right units of measurement have been always not \"cool\" enough but now with the popularity and acceptance of the Responsive Design people are thinking more about scale typography.","author_id":1},{"id":5,"uuid":"8f3e5699-f617-491a-962f-9406e7cb3cc9","title":"The filter bubble and your social life online.","slug":"the-filter-bubble-and-your-social-life-online","markdown":"\n \nAt the same time Internet give us liberty to think and see different points about our world in culture, politics, nature, life in general the internet is made by \"man\" and we have our own perspective of the world.\nTherefore we are doing the same exactly mistakes we are doing offline it's just another digital space 1 and 0's.\n\nIt's sort of funny sometimes how we push things turning every person the \"product of the environment\" even on digital.\n\nI'll never deny that technology in particular internet changed the world for better but I still think we could do much better when we start to change our mindset as a \"person\" for the community.\n\nWatching this great video we can see that people don't loose their old habits to live in their \"boxes\" and continue to create their \"Extended Mind\"\n\n##Are we going backwards?!\n\n<div class=\"fluidMedia\">\n\t<iframe src=\"https://www.youtube.com/embed/B8ofWFx525s\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>\n\n##I also suggest..\nyou to watch this incredible documentary called <a href=\"http://internetrising.net/\" title=\"internet rising\" target=\"_blanc\">\"Internet Rising\"</a> investigating the evolving relationships between the Internet and collective consciousness of humanity. It provokes many questions about ancient and modern paradoxes of life. You definitely should check it out.\n\n<div class=\"fluidMedia\">\n\t<iframe src=\"https://www.youtube.com/embed/pMh8oBdKkK4\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>\n\n<br>\nBoth videos are great to inspired us to think about almost everything surround us in the digital life.","html":"<p>At the same time Internet give us liberty to think and see different points about our world in culture, politics, nature, life in general the internet is made by &quot;man&quot; and we have our own perspective of the world.\nTherefore we are doing the same exactly mistakes we are doing offline it&#39;s just another digital space 1 and 0&#39;s.</p>\n\n<p>It&#39;s sort of funny sometimes how we push things turning every person the &quot;product of the environment&quot; even on digital.</p>\n\n<p>I&#39;ll never deny that technology in particular internet changed the world for better but I still think we could do much better when we start to change our mindset as a &quot;person&quot; for the community.</p>\n\n<p>Watching this great video we can see that people don&#39;t loose their old habits to live in their &quot;boxes&quot; and continue to create their &quot;Extended Mind&quot;</p>\n\n<h2>Are we going backwards?!</h2>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;https://www.youtube.com/embed/B8ofWFx525s&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<h2>I also suggest..</h2>\n\n<p>you to watch this incredible documentary called &lt;a href=&quot;http://internetrising.net/&quot; title=&quot;internet rising&quot; target=&quot;_blanc&quot;&gt;&quot;Internet Rising&quot;&lt;/a&gt; investigating the evolving relationships between the Internet and collective consciousness of humanity. It provokes many questions about ancient and modern paradoxes of life. You definitely should check it out.</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;https://www.youtube.com/embed/pMh8oBdKkK4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;\nBoth videos are great to inspired us to think about almost everything surround us in the digital life.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"The filter bubble and your social life online.","meta_description":"At the same time Internet give us liberty to learn and see different things about our world, about cultures, politics, nature, life in general...","author_id":1},{"id":6,"uuid":"83e591d8-1f29-4b15-8cdf-25f0b6bba607","title":"Inspirational Art and Code by Joshua Davis.","slug":"inspirational-art-and-code-by-joshua-davis","markdown":"\n \nA friend of mine shared this great talk by Joshua Davis at W3Conf in San Francisco.\n<br>\nJoshua's work is very inspirational and he can do very cool things using processing.js to generate forms.\n\nDon't forget to check out his website <a href=\"http://www.joshuadavis.com/\" title=\"Joshua Davis\" target=\"_blank\">Joshua Davis</a>\n\n<div class=\"fluidMedia\">\n\t<iframe src=\"https://www.youtube.com/embed/LJS4fBjdPM4\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>","html":"<p>A friend of mine shared this great talk by Joshua Davis at W3Conf in San Francisco.\n&lt;br&gt;\nJoshua&#39;s work is very inspirational and he can do very cool things using processing.js to generate forms.</p>\n\n<p>Don&#39;t forget to check out his website &lt;a href=&quot;http://www.joshuadavis.com/&quot; title=&quot;Joshua Davis&quot; target=&quot;_blank&quot;&gt;Joshua Davis&lt;/a&gt;</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;https://www.youtube.com/embed/LJS4fBjdPM4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Inspirational Art and Code by Joshua Davis.","meta_description":"A friend of mine shared this great talk by Joshua Davis at W3Conf in San Francisco..his work is very inspirational.","author_id":1},{"id":7,"uuid":"071132de-c206-4d97-816d-be257589728c","title":"Secrets of Lea Verou about CSS.","slug":"secrets-of-lea-verou-css","markdown":"\n \nI'm not sure when it was but in the end of 2011 or beginning of 2012 I saw <a href=\"http://lea.verou.me/\" title=\"Lea Verou\" target=\"_blank\">Lea Verou</a> talking about \"CSS3 Secrets: 10 things you might not know about CSS3\" and it was great see how many great techniques we can use to achieve our <br> client - side goals.\n\n##10 things you might not know about CSS3\n\n<div class=\"fluidMedia\">\n\t<iframe src=\"https://www.youtube.com/embed/54wJkqG8jXE\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>\n\n<br>\n\nAnd this year (2013) she had another great speak at W3Conf in San Francisco about \"More CSS Secrets: Another 10 things you may not know about CSS\"\n\n##More CSS Secrets: Another 10 things you may not know about CSS\n\n<div class=\"fluidMedia\">\n\t<iframe src=\"https://www.youtube.com/embed/3ikye7Qc7Ak\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>\n\n<br>\n\nAs you can see she is a Client - Side hacker specifically in CSS and always bringing new ideas and techniques to solve common problems we used to solve with complex javascript code and hacks.","html":"<p>I&#39;m not sure when it was but in the end of 2011 or beginning of 2012 I saw &lt;a href=&quot;http://lea.verou.me/&quot; title=&quot;Lea Verou&quot; target=&quot;_blank&quot;&gt;Lea Verou&lt;/a&gt; talking about &quot;CSS3 Secrets: 10 things you might not know about CSS3&quot; and it was great see how many great techniques we can use to achieve our &lt;br&gt; client - side goals.</p>\n\n<h2>10 things you might not know about CSS3</h2>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;https://www.youtube.com/embed/54wJkqG8jXE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>And this year (2013) she had another great speak at W3Conf in San Francisco about &quot;More CSS Secrets: Another 10 things you may not know about CSS&quot;</p>\n\n<h2>More CSS Secrets: Another 10 things you may not know about CSS</h2>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;https://www.youtube.com/embed/3ikye7Qc7Ak&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>As you can see she is a Client - Side hacker specifically in CSS and always bringing new ideas and techniques to solve common problems we used to solve with complex javascript code and hacks.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Secrets of Lea Verou about CSS.","meta_description":"I'm not sure when it was but in the end of 2011 or beginning of 2012 I saw Lea Verou talking about \"CSS3 Secrets - 10 things you might not know about CSS3\" and it was great see how many great techniques we can use to achieve our client - side goals.","author_id":1},{"id":8,"uuid":"0b3f582c-00f7-47a1-990a-69b5f8d8bd8e","title":"CSS Architecture for Web Applications.","slug":"css-architecture-for-web-applications","markdown":"\n\nWrite CSS is more complex than some developers, software engineers and designers think and If you are a \"Dogma\" \"best practice\" person this post might hurt your feelings.\n\nBad CSS architecture can make Web applications slower (500ms slower = 20% drop in traffic for Google) <br> (100ms slower = 1% drop in sales for amazon), messy and unmaintainable for the team, waste of time trying to find something to fix another thing and the list goes on.\n\nAll the bad examples showed here for good or for bad I had the pleasure to work with in some project.\n\n##The bad examples first\n\n<pre><code data-language=\"css\">\n#header {\n\tproperty: value;\n\tproperty: value;\n}\n\n#logo {\n\tproperty: value;\n\tproperty: value;\n}\n\n#menu {\n\tproperty: value;\n\tproperty: value;\n}\n\n#search {\n\tproperty: value;\n\tproperty: value;\n}\n\n#bt-yellow {\n\tproperty: value;\n\tproperty: value;\n}\n</code></pre>\n\nYeah! people still doing this approach specifying \"ID's\" for every element on the page and that kind of architecture \"id's\" has no problem for browser rendering or for Javascript developers concerned about performance or make his life easier.\n\nBut as a point of view of good CSS architecture that's not DRY, reusable, modular, scalable and depending on the project this can get pretty messy and heavy. So, never do that way ok?!\n\n##More bad examples\n\nMy second experience with a different way to write CSS architecture was when I worked as a consultant on a ongoing big Web Application. <br>\nAt this point the initial developers started kind of in a \"good\" way making like a mixed code between SMACSS and their own judgments. <br>\n\n<pre><code data-language=\"css\">\nul.button-group-yellow {\n\tproperty: value;\n\tproperty: value;\n}\n\nul.button-group-yellow li {\n\tproperty: value;\n\tproperty: value;\n}\n\nul.button-group-yellow li div {\n\tproperty: value;\n\tproperty: value;\n}\n\nul.button-group-yellow li div p {\n\tproperty: value;\n\tproperty: value;\n}\n\nul.button-group-yellow li div p a {\n\tproperty: value;\n\tproperty: value;\n}\n</code></pre>\n\nI confess we had a bunch of modular groups forcing DRY methodology but look at those terrible long descendants selectors (nesting), tag-qualify and this approach is very bad for browser rendering/performance, not scalable and gets/got pretty messy after all.\n\n##Some good tips\n- All members has to work together but this is not a job for Designers, Software engineers. This is a job Front End Engineers.\n- CSS is code therefore size and rendering matters.\n- Avoid specificity \"ID's\".\n- Avoid long descendants selectors (nesting).\n- Avoid tag-qualify.\n- Browsers render your CSS going right to left.\n\n<pre><code data-language=\"css\">\n#header div ul li p a {\n\t/* the browser render/algorithm go through all your elements starting at \"a\" element to find the matches */\n\tproperty: value;\n\tproperty: value;\n}\n\n#header a {\n\t/* better than the first example */\n\t/* but still not good enough */\n\tproperty: value;\n\tproperty: value;\n}\n\nheader#header {\n\t/* yet not good. tag-qualify is very very hard to happen to actually use them */\n\tproperty: value;\n\tproperty: value;\n}\n\n#header {\n\t/* good for performance but not good for modular, DRY, scalable */\n\tproperty: value;\n\tproperty: value;\n}\n\n/* if you need to qualify your selector use quasi tag-qualify methodology */\n/* header */ .header {\n\t/* always prefer/use classes they are fast, reusable, scalable, modular, easy to maintain */\n\tproperty: value;\n\tproperty: value;\n}\n</code></pre>\n\n- Use DRY (don't repeat yourself methodology), modular groups, scalable, readable and maintainable.\n- Make it well documented (readable for humans not machines).\n- Use CSS preprocessors (It doesn't mean you are going to have a good CSS architecture).\n- More developers = more problems so write a Doc & Stylesheets guide for your team.\n- Comments are KING. They wont be there afterwards because you will minify so use wisely.\n- Find the patterns in your design and apply OOCSS method (works great for me).\n- Rule sets in specific order (example how I do it below).\n\n<pre><code data-language=\"css\">\n/* ==========================================================================\n#   SCSS/COMPASS Modular Project Based.\n# \t@settings ( COMPASS, Variables, Functions, Mixins, etc... )\n# \t@base ( regular elements )\n# \t@helpers ( layout helpers )\n# \t@layout ( layout template, grid structure )\n# \t@skin ( modules, background, colors, typography.. )\n# \t@media-queries ( content-driven breakpoints )\n# \t@ie ( IE fixes )\n========================================================================== */\n\n\n/* ==========================================================================\n@settings\n========================================================================== */\n@import \"_settings\";\n\n/* ==========================================================================\n@base\n========================================================================== */\n@import \"_base\";\n\n/* ==========================================================================\n@helpers\n========================================================================== */\n@import \"_helpers\";\n\n/* ==========================================================================\n@layout\n========================================================================== */\n@import \"_layout\";\n\n/* ==========================================================================\n@skin\n========================================================================== */\n@import \"_skin\";\n\n/* ==========================================================================\n@media-queries\n========================================================================== */\n@import \"_media-queries\";\n\n/* ==========================================================================\n@ie\n========================================================================== */\n@import \"_ie\";\n</code></pre>\n\n##Another great tips. From BEM methodology\n\n- Fast-to-develop, long-lived projects. It should be possible to develop and launch the first version of a website quickly with an architecture that helps to maintain it in the long run.\n- Team scalability. Adding new people to a product team should improve speed, not decrease it. We need to be able to assign new members to a team without a steep learning curve.\n- Code should be well-structured for a project to remain maintainable over time and team changes.\n- Code reuse. To maintain UI consistency and minimize development effort on typical interface components, those components have to be easily reusable. The source code should not have contextual dependency on the other code, it should be easy to move that code to another place.\n\n\n##Our fashionable way\n\nI always had concern about my classes notation name, how should I name semantically meaningful? how should I show this on the HTML? How I will better transfer/show by notation name my HTML structure?.. <br>\n<strong>One of the most important ideas of classes notation name is try to transfer/show the HTML structure reading the classes names on the CSS file</strong>\n\nExample, Let's say we have one module.\n\n<pre><code data-language=\"css\">\n.promo-box {\n\tproperty: value;\n}\n.promo-box-inner {\n\tproperty: value;\n}\n.promo-box-img {\n\tproperty: value;\n}\n.promo-box-tit {\n\tproperty: value;\n}\n.promo-box-txt {\n\tproperty: value;\n}\n</code></pre>\n\nI even don't need to show you the HTML markup to make you understand the HTML structure, can you see the possibilities here?!\n\n##I'm changing to..\n\nOne week before I write this post I saw the speak of <a href=\"http://nicolasgallagher.com/\" target=\"_blank\" title=\"\">Nicolas Gallagher</a> about \"Questioning good practices\" (I highly recommend) in his speak he also showed a <a href=\"http://www.yandex.com/\" target=\"_blank\" title=\"Russian Search engine\">Russian Search engine</a> classes notation name and It's true my notation is fashionable at the moment.\n\nAll made sense. So now on I will use this non-fashionable YET classes notation name but answering the same questions I told you before.<br>\nwhat are you talking about Michael? Here's a new example of that module above.\n\n<pre><code data-language=\"css\">\n.promoBox {\n\tproperty: value;\n}\n.promoBox-inner {\n\tproperty: value;\n}\n.promoBox-inner-img {\n\tproperty: value;\n}\n.promoBox-inner-tit {\n\tproperty: value;\n}\n.promoBox-inner-txt {\n\tproperty: value;\n}\n\n.promoBox--round {\n\tproperty: value;\n}\n</code></pre>\n\nHere we have our module \"promoBox\", the \"promoBox-inner\" with one dash means it is a child of \"promoBox\", the \"promoBox-inner-img\" means it is child of \"promoBox-inner\" that it is child of \"promoBox\" and so on. <br>\nLastly we have \"promoBox--round\" with two dashes that means extended/modifier. Beautiful right?!\n\n##Final thoughts\n\nThere's no absolute way to write, give classes name notation or build \"The god master CSS architecture\" but there's definitely great practices to make a great Web application and it all depends on your team and the focus on your Web application goals.\n\n\n\n\n\n","html":"<p>Write CSS is more complex than some developers, software engineers and designers think and If you are a &quot;Dogma&quot; &quot;best practice&quot; person this post might hurt your feelings.</p>\n\n<p>Bad CSS architecture can make Web applications slower (500ms slower = 20% drop in traffic for Google) &lt;br&gt; (100ms slower = 1% drop in sales for amazon), messy and unmaintainable for the team, waste of time trying to find something to fix another thing and the list goes on.</p>\n\n<p>All the bad examples showed here for good or for bad I had the pleasure to work with in some project.</p>\n\n<h2>The bad examples first</h2>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;</p>\n\n<h1>header {</h1>\n\n<pre><code>property: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<h1>logo {</h1>\n\n<pre><code>property: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<h1>menu {</h1>\n\n<pre><code>property: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<h1>search {</h1>\n\n<pre><code>property: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<h1>bt-yellow {</h1>\n\n<pre><code>property: value;\nproperty: value;</code></pre>\n\n<p>}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Yeah! people still doing this approach specifying &quot;ID&#39;s&quot; for every element on the page and that kind of architecture &quot;id&#39;s&quot; has no problem for browser rendering or for Javascript developers concerned about performance or make his life easier.</p>\n\n<p>But as a point of view of good CSS architecture that&#39;s not DRY, reusable, modular, scalable and depending on the project this can get pretty messy and heavy. So, never do that way ok?!</p>\n\n<h2>More bad examples</h2>\n\n<p>My second experience with a different way to write CSS architecture was when I worked as a consultant on a ongoing big Web Application. &lt;br&gt;\nAt this point the initial developers started kind of in a &quot;good&quot; way making like a mixed code between SMACSS and their own judgments. &lt;br&gt;</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\nul.button-group-yellow {\n\tproperty: value;\n\tproperty: value;\n}</p>\n\n<p>ul.button-group-yellow li {\n\tproperty: value;\n\tproperty: value;\n}</p>\n\n<p>ul.button-group-yellow li div {\n\tproperty: value;\n\tproperty: value;\n}</p>\n\n<p>ul.button-group-yellow li div p {\n\tproperty: value;\n\tproperty: value;\n}</p>\n\n<p>ul.button-group-yellow li div p a {\n\tproperty: value;\n\tproperty: value;\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>I confess we had a bunch of modular groups forcing DRY methodology but look at those terrible long descendants selectors (nesting), tag-qualify and this approach is very bad for browser rendering/performance, not scalable and gets/got pretty messy after all.</p>\n\n<h2>Some good tips</h2>\n\n<ul><li>All members has to work together but this is not a job for Designers, Software engineers. This is a job Front End Engineers.</li><li>CSS is code therefore size and rendering matters.</li><li>Avoid specificity &quot;ID&#39;s&quot;.</li><li>Avoid long descendants selectors (nesting).</li><li>Avoid tag-qualify.</li><li>Browsers render your CSS going right to left.</li></ul>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;</p>\n\n<h1>header div ul li p a {</h1>\n\n<pre><code>/* the browser render/algorithm go through all your elements starting at &quot;a&quot; element to find the matches */\nproperty: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<h1>header a {</h1>\n\n<pre><code>/* better than the first example */\n/* but still not good enough */\nproperty: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<p>header#header {\n\t/<em> yet not good. tag-qualify is very very hard to happen to actually use them </em>/\n\tproperty: value;\n\tproperty: value;\n}</p>\n\n<h1>header {</h1>\n\n<pre><code>/* good for performance but not good for modular, DRY, scalable */\nproperty: value;\nproperty: value;</code></pre>\n\n<p>}</p>\n\n<p>/<em> if you need to qualify your selector use quasi tag-qualify methodology </em>/\n/<em> header </em>/ .header {\n\t/<em> always prefer/use classes they are fast, reusable, scalable, modular, easy to maintain </em>/\n\tproperty: value;\n\tproperty: value;\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<ul><li>Use DRY (don&#39;t repeat yourself methodology), modular groups, scalable, readable and maintainable.</li><li>Make it well documented (readable for humans not machines).</li><li>Use CSS preprocessors (It doesn&#39;t mean you are going to have a good CSS architecture).</li><li>More developers = more problems so write a Doc &amp; Stylesheets guide for your team.</li><li>Comments are KING. They wont be there afterwards because you will minify so use wisely.</li><li>Find the patterns in your design and apply OOCSS method (works great for me).</li><li>Rule sets in specific order (example how I do it below).</li></ul>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\n/* ==========================================================================</p>\n\n<h1>SCSS/COMPASS Modular Project Based.</h1>\n\n<h1>@settings ( COMPASS, Variables, Functions, Mixins, etc... )</h1>\n\n<h1>@base ( regular elements )</h1>\n\n<h1>@helpers ( layout helpers )</h1>\n\n<h1>@layout ( layout template, grid structure )</h1>\n\n<h1>@skin ( modules, background, colors, typography.. )</h1>\n\n<h1>@media-queries ( content-driven breakpoints )</h1>\n\n<h1>@ie ( IE fixes )</h1>\n\n<p>========================================================================== */</p>\n\n<p>/<em> ==========================================================================\n@settings\n========================================================================== </em>/\n@import &quot;_settings&quot;;</p>\n\n<p>/<em> ==========================================================================\n@base\n========================================================================== </em>/\n@import &quot;_base&quot;;</p>\n\n<p>/<em> ==========================================================================\n@helpers\n========================================================================== </em>/\n@import &quot;_helpers&quot;;</p>\n\n<p>/<em> ==========================================================================\n@layout\n========================================================================== </em>/\n@import &quot;_layout&quot;;</p>\n\n<p>/<em> ==========================================================================\n@skin\n========================================================================== </em>/\n@import &quot;_skin&quot;;</p>\n\n<p>/<em> ==========================================================================\n@media-queries\n========================================================================== </em>/\n@import &quot;_media-queries&quot;;</p>\n\n<p>/<em> ==========================================================================\n@ie\n========================================================================== </em>/\n@import &quot;_ie&quot;;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Another great tips. From BEM methodology</h2>\n\n<ul><li>Fast-to-develop, long-lived projects. It should be possible to develop and launch the first version of a website quickly with an architecture that helps to maintain it in the long run.</li><li>Team scalability. Adding new people to a product team should improve speed, not decrease it. We need to be able to assign new members to a team without a steep learning curve.</li><li>Code should be well-structured for a project to remain maintainable over time and team changes.</li><li>Code reuse. To maintain UI consistency and minimize development effort on typical interface components, those components have to be easily reusable. The source code should not have contextual dependency on the other code, it should be easy to move that code to another place.</li></ul>\n\n<h2>Our fashionable way</h2>\n\n<p>I always had concern about my classes notation name, how should I name semantically meaningful? how should I show this on the HTML? How I will better transfer/show by notation name my HTML structure?.. &lt;br&gt;\n&lt;strong&gt;One of the most important ideas of classes notation name is try to transfer/show the HTML structure reading the classes names on the CSS file&lt;/strong&gt;</p>\n\n<p>Example, Let&#39;s say we have one module.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\n.promo-box {\n\tproperty: value;\n}\n.promo-box-inner {\n\tproperty: value;\n}\n.promo-box-img {\n\tproperty: value;\n}\n.promo-box-tit {\n\tproperty: value;\n}\n.promo-box-txt {\n\tproperty: value;\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>I even don&#39;t need to show you the HTML markup to make you understand the HTML structure, can you see the possibilities here?!</p>\n\n<h2>I&#39;m changing to..</h2>\n\n<p>One week before I write this post I saw the speak of &lt;a href=&quot;http://nicolasgallagher.com/&quot; target=&quot;<em>blank&quot; title=&quot;&quot;&gt;Nicolas Gallagher&lt;/a&gt; about &quot;Questioning good practices&quot; (I highly recommend) in his speak he also showed a &lt;a href=&quot;http://www.yandex.com/&quot; target=&quot;</em>blank&quot; title=&quot;Russian Search engine&quot;&gt;Russian Search engine&lt;/a&gt; classes notation name and It&#39;s true my notation is fashionable at the moment.</p>\n\n<p>All made sense. So now on I will use this non-fashionable YET classes notation name but answering the same questions I told you before.&lt;br&gt;\nwhat are you talking about Michael? Here&#39;s a new example of that module above.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\n.promoBox {\n\tproperty: value;\n}\n.promoBox-inner {\n\tproperty: value;\n}\n.promoBox-inner-img {\n\tproperty: value;\n}\n.promoBox-inner-tit {\n\tproperty: value;\n}\n.promoBox-inner-txt {\n\tproperty: value;\n}</p>\n\n<p>.promoBox--round {\n\tproperty: value;\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Here we have our module &quot;promoBox&quot;, the &quot;promoBox-inner&quot; with one dash means it is a child of &quot;promoBox&quot;, the &quot;promoBox-inner-img&quot; means it is child of &quot;promoBox-inner&quot; that it is child of &quot;promoBox&quot; and so on. &lt;br&gt;\nLastly we have &quot;promoBox--round&quot; with two dashes that means extended/modifier. Beautiful right?!</p>\n\n<h2>Final thoughts</h2>\n\n<p>There&#39;s no absolute way to write, give classes name notation or build &quot;The god master CSS architecture&quot; but there&#39;s definitely great practices to make a great Web application and it all depends on your team and the focus on your Web application goals.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"CSS Architecture for Web Applications.","meta_description":"Write CSS is more complex than some developers, software engineers and designers think and If you are a \"Dogma\" \"best practice\" person this post might hurt your feelings.","author_id":1},{"id":9,"uuid":"8aa5d86b-b1bd-4b78-a662-6d3af2da57c7","title":"Fluid iframe without use of javascript.","slug":"fluid-iframe-and-images-without-javascript-plugins","markdown":"\n\nSimple technique to make fluid iframes without use of javascript or plugins. Using this technique we have more gains in performance and simplicity.\n\nThis is a technique of positioning a element inside of another using \"position: absolute;\" for the \"child\" and \"position: relative;\" for the \"wrap\".\n\n(ps: Depending on your case I suggest you set height for images).\n\n##HTML\n\n<pre><code data-language=\"html\">\n<div class=\"fluidMedia\">\n\t<iframe src=\"\" frameborder=\"0\"> </iframe>\n</div>\n</code></pre>\n\n##CSS\n\n<pre><code data-language=\"css\">\n.fluidMedia {\n\tposition: relative;\n\tpadding-bottom: 56.25%; /* proportion value to aspect ratio 16:9 (9 / 16 = 0.5625 or 56.25%) */\n\tpadding-top: 30px;\n\theight: 0;\n\toverflow: hidden;\n}\n\n.fluidMedia iframe {\n\tposition: absolute;\n\ttop: 0; \n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n}\n</code></pre>\n\nExample <a href=\"/blog/secrets-of-lea-verou-css/\" title=\"fluid iframe example\">here</a>.\n\n##Browser support\n\n- IE 7+\n- Firefox 3.6+\n- Chrome 6+\n- Safari 5+\n\nYou can know more about it on <a href=\"http://alistapart.com/article/creating-intrinsic-ratios-for-video\" target=\"_blank\" title=\"A List Apart\">A List Apart</a> great article.\n\nCheers!","html":"<p>Simple technique to make fluid iframes without use of javascript or plugins. Using this technique we have more gains in performance and simplicity.</p>\n\n<p>This is a technique of positioning a element inside of another using &quot;position: absolute;&quot; for the &quot;child&quot; and &quot;position: relative;&quot; for the &quot;wrap&quot;.</p>\n\n<p>(ps: Depending on your case I suggest you set height for images).</p>\n\n<h2>HTML</h2>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;\n&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>CSS</h2>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;\n.fluidMedia {\n\tposition: relative;\n\tpadding-bottom: 56.25%; /<em> proportion value to aspect ratio 16:9 (9 / 16 = 0.5625 or 56.25%) </em>/\n\tpadding-top: 30px;\n\theight: 0;\n\toverflow: hidden;\n}</p>\n\n<p>.fluidMedia iframe {\n\tposition: absolute;\n\ttop: 0; \n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Example &lt;a href=&quot;/blog/secrets-of-lea-verou-css/&quot; title=&quot;fluid iframe example&quot;&gt;here&lt;/a&gt;.</p>\n\n<h2>Browser support</h2>\n\n<ul><li>IE 7+</li><li>Firefox 3.6+</li><li>Chrome 6+</li><li>Safari 5+</li></ul>\n\n<p>You can know more about it on &lt;a href=&quot;http://alistapart.com/article/creating-intrinsic-ratios-for-video&quot; target=&quot;_blank&quot; title=&quot;A List Apart&quot;&gt;A List Apart&lt;/a&gt; great article.</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Fluid iframe without use of javascript.","meta_description":"Simple technique to make fluid iframes without use of javascript or plugins.","author_id":1},{"id":10,"uuid":"361ed0f5-4581-40af-b325-8ec537f3ff1a","title":"From San Francisco to the Brazilian developers community.","slug":"from-san-francisco-to-the-brazilian-developers-community","markdown":"\n \nI went to the HTML5 Developers Conference in San Francisco (01 Apr 13 to 03 Apr 13) and there I met some awesome developers from Brazil and as they are very active to help the developers community in Brazil with speaks, presentations and events they decided record a chat with me talking about how it is work in US, how I got a job here and some good tips for those that want to try this adventure.\n\nThe awesome developers from Brazil including myself and the Principal Mozilla's Evangelist Christian Heilmann, we had a great dinner. ;)\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/sf-dinner.jpg\" alt=\"Brazilian developers and Christian Heilmann\">\n</div>\n\n<br>\n\n## The chat\n\nThe video isn't in a good quality but the content is the important.\n\n<div class=\"fluidMedia\">\n\t<iframe src=\"https://www.youtube.com/embed/73RVbGcZQXk\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>\n\n<br>\n\nThanks to all my friends from Brazil shared this to help the developers that thinks to come work in US.","html":"<p>I went to the HTML5 Developers Conference in San Francisco (01 Apr 13 to 03 Apr 13) and there I met some awesome developers from Brazil and as they are very active to help the developers community in Brazil with speaks, presentations and events they decided record a chat with me talking about how it is work in US, how I got a job here and some good tips for those that want to try this adventure.</p>\n\n<p>The awesome developers from Brazil including myself and the Principal Mozilla&#39;s Evangelist Christian Heilmann, we had a great dinner. ;)</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/sf-dinner.jpg&quot; alt=&quot;Brazilian developers and Christian Heilmann&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<h2>The chat</h2>\n\n<p>The video isn&#39;t in a good quality but the content is the important.</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n\t&lt;iframe src=&quot;https://www.youtube.com/embed/73RVbGcZQXk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>Thanks to all my friends from Brazil shared this to help the developers that thinks to come work in US.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"From San Francisco to the Brazilian developers community.","meta_description":"I went to the HTML5 Developers Conference in San Francisco (01 Apr 13 to 03 Apr 13) and there I met some awesome developers from Brazil and as they are very active to help the developers community in Brazil with speaks, presentations and events they decided record a chat with me talking about how it is work in US, how I got a job here and some good tips for those that want to try this adventure.","author_id":1},{"id":11,"uuid":"f85476b9-2c3b-4859-b04c-2b2913f3ca4e","title":"Basic overview of client - side templating","slug":"basic-overview-of-client-side-templating","markdown":"\n\nTemplate rendering is very common on the web applications when we talk about back end development where technologies like Java, Ruby, PHP.. are using to render templates and show content/html, but lately about two or three years ago we could noticed that developers and companies are changing this using client side templating.\n\n## Server - Side templating (the common way)\n\nSo as I mentioned before back end technologies like Java, Ruby, PHP.. has being using templates to render content/HTML from the back to the the client side and this approach consists in literally render on the server using one of those technologies and through it into the client - side.\n\nTwo things are very clear to me. First we have to consume the server (imagine if you have to render lots of time), Second is the bandwidth request so the template and the data has to be downloaded into the client side (slow and request bandwidth).\n\n## Client - Side templating (the new kid in the block?!)\n\nThe client side consists in removing the job of rendering on the back and adding the job to the client using Javascript that runs on each user's browser making faster web apps and adding more control for you at your end.\n\nIt has being very helpful for Single Page Applications where you can just update an section on your website without refresh the page or download assets all over again.\n\nAt start the client side template will use placeholders as content using it's own tags and after your JS download the JSON data another very known technology (fast and simple to read) the template will be rendered/compiled, the placeholders will be replaced to data from the JSON and lastly the HTML markup you be appended into the HTML element.\n\n## Simple JSON data example\n\n<pre><code data-language=\"json\">\n{\n  \"client\": {\n    \"name\": \"Michael lancaster\",\n    \"name\": \"John Due\"\n  },\n  \"occupation\": {\n    \"description\": \"Front End Engineer\",\n    \"description\": \"Jornalist\"\n  }\n}\n</code></pre>\n\nThis is very human readable right?!\n\n## Simple Web app example\n\nHere I'm using the Yahoo YQL API requesting the JSON data and rendering on the page using Handlebars.js with a little of logic.\nYou can check out and download the Web app here <a href=\"http://git.io/tUfHyA\" title=\"Handlebars.js app\" target=\"_blank\">http://git.io/tUfHyA</a>\n\n## Handlebars.js template markup example\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/client-side.png\" alt=\"Brazilian developers and Christian Heilmann\">\n</div>\n\n<br/>\n\n## App JS file\n\nOn my app.js file I requested the JSON data, replaced the template placeholders, rendered/compiled the template and appended into the HTML element.\n\n<pre><code data-language=\"javascript\">\nfunction showNewsFromYahooAPI() {\n  $.ajax({\n        url: 'http://query.yahooapis.com/v1/public/yql?q=select%20title%20from%20rss%20where%20url%3D%22http%3A%2F%2Frss.news.yahoo.com%2Frss%2Ftopstories%22&format=json&callback=',\n        dataType: 'json'\n    }).done(function(data){\n      var\n        query = data.query.results,\n        source = $('#myTemplate').html(),\n        compiledTemplate = Handlebars.compile(source),\n        result = compiledTemplate(query);\n\n      $('#content').html(result);\n    });\n}\n\n$(function() {\n    showNewsFromYahooAPI();\n});\n</code></pre>\n\n## Who uses client side templating?!\n\n- Linkedin (Dust.js)\n- USAToday (Underscore.js)\n- Walmart Mobile (Underscore.js)\n- Hulu (Handlebars.js)\n- Groupon (Mustache.js)\n- And many, many others.\n\n## Be aware of..\n\n- Heavy rendering on the users side (devices are not that good as you think they are).\n- Organization is king.\n- There's logic-less and logic templates (ask yourself how complex is my template?).\n\n## Some links to client side template\n\n<a href=\"http://handlebarsjs.com/\" title=\"Handlebarsjs\" target=\"_blank\">http://handlebarsjs.com/</a>\n  <br>\n<a href=\"http://mustache.github.io/\" title=\"Mustachejs\" target=\"_blank\">http://mustache.github.io/</a>\n  <br>\n<a href=\"http://akdubya.github.io/dustjs/\" title=\"Dustjs\" target=\"_blank\">http://akdubya.github.io/dustjs/</a>\n  <br>\n<a href=\"http://documentcloud.github.io/underscore/#template\" title=\"Underscorejs\" target=\"_blank\">http://documentcloud.github.io/underscore/#template</a>\n  <br>\n<a href=\"https://github.com/jquery/jquery-tmpl\" title=\"jQuery tmpl\" target=\"_blank\">https://github.com/jquery/jquery-tmpl</a>\n  <br>\nand many others like Jade, Haml-js, Eco, etc.\n\n## I suggest you read..\n\n<p>\nSmashing Magazine - Client-Side Templating <a href=\"http://coding.smashingmagazine.com/2012/12/05/client-side-templating/\" title=\"Smashing magazine: client side templating\" target=\"_blank\">click here.</a>\n    <br>\nLeaving JSPs in the dust: moving LinkedIn to dust.js client-side templates <a href=\"http://engineering.linkedin.com/frontend/leaving-jsps-dust-moving-linkedin-dustjs-client-side-templates\" title=\"Leaving JSPs in the dust: moving LinkedIn to dust.js client-side templates\" target=\"_blank\">click here.</a>\n    <br>\nThe client-side templating throwdown: mustache, handlebars, dust.js, and more <a href=\"http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more\" title=\"The client-side templating throwdown: mustache, handlebars, dust.js, and more\" target=\"_blank\">click here.</a>\n\n</p>\n\nCheers!\n\n\n\n\n\n\n","html":"<p>Template rendering is very common on the web applications when we talk about back end development where technologies like Java, Ruby, PHP.. are using to render templates and show content/html, but lately about two or three years ago we could noticed that developers and companies are changing this using client side templating.</p>\n\n<h2>Server - Side templating (the common way)</h2>\n\n<p>So as I mentioned before back end technologies like Java, Ruby, PHP.. has being using templates to render content/HTML from the back to the the client side and this approach consists in literally render on the server using one of those technologies and through it into the client - side.</p>\n\n<p>Two things are very clear to me. First we have to consume the server (imagine if you have to render lots of time), Second is the bandwidth request so the template and the data has to be downloaded into the client side (slow and request bandwidth).</p>\n\n<h2>Client - Side templating (the new kid in the block?!)</h2>\n\n<p>The client side consists in removing the job of rendering on the back and adding the job to the client using Javascript that runs on each user&#39;s browser making faster web apps and adding more control for you at your end.</p>\n\n<p>It has being very helpful for Single Page Applications where you can just update an section on your website without refresh the page or download assets all over again.</p>\n\n<p>At start the client side template will use placeholders as content using it&#39;s own tags and after your JS download the JSON data another very known technology (fast and simple to read) the template will be rendered/compiled, the placeholders will be replaced to data from the JSON and lastly the HTML markup you be appended into the HTML element.</p>\n\n<h2>Simple JSON data example</h2>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;json&quot;&gt;\n{\n  &quot;client&quot;: {\n    &quot;name&quot;: &quot;Michael lancaster&quot;,\n    &quot;name&quot;: &quot;John Due&quot;\n  },\n  &quot;occupation&quot;: {\n    &quot;description&quot;: &quot;Front End Engineer&quot;,\n    &quot;description&quot;: &quot;Jornalist&quot;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>This is very human readable right?!</p>\n\n<h2>Simple Web app example</h2>\n\n<p>Here I&#39;m using the Yahoo YQL API requesting the JSON data and rendering on the page using Handlebars.js with a little of logic.\nYou can check out and download the Web app here &lt;a href=&quot;http://git.io/tUfHyA&quot; title=&quot;Handlebars.js app&quot; target=&quot;_blank&quot;&gt;http://git.io/tUfHyA&lt;/a&gt;</p>\n\n<h2>Handlebars.js template markup example</h2>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/client-side.png&quot; alt=&quot;Brazilian developers and Christian Heilmann&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br/&gt;</p>\n\n<h2>App JS file</h2>\n\n<p>On my app.js file I requested the JSON data, replaced the template placeholders, rendered/compiled the template and appended into the HTML element.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nfunction showNewsFromYahooAPI() {\n  $.ajax({\n        url: &#39;http://query.yahooapis.com/v1/public/yql?q=select%20title%20from%20rss%20where%20url%3D%22http%3A%2F%2Frss.news.yahoo.com%2Frss%2Ftopstories%22&amp;format=json&amp;callback=&#39;,\n        dataType: &#39;json&#39;\n    }).done(function(data){\n      var\n        query = data.query.results,\n        source = $(&#39;#myTemplate&#39;).html(),\n        compiledTemplate = Handlebars.compile(source),\n        result = compiledTemplate(query);</p>\n\n<pre><code>  $(&#39;#content&#39;).html(result);\n});</code></pre>\n\n<p>}</p>\n\n<p>$(function() {\n    showNewsFromYahooAPI();\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Who uses client side templating?!</h2>\n\n<ul><li>Linkedin (Dust.js)</li><li>USAToday (Underscore.js)</li><li>Walmart Mobile (Underscore.js)</li><li>Hulu (Handlebars.js)</li><li>Groupon (Mustache.js)</li><li>And many, many others.</li></ul>\n\n<h2>Be aware of..</h2>\n\n<ul><li>Heavy rendering on the users side (devices are not that good as you think they are).</li><li>Organization is king.</li><li>There&#39;s logic-less and logic templates (ask yourself how complex is my template?).</li></ul>\n\n<h2>Some links to client side template</h2>\n\n<p>&lt;a href=&quot;http://handlebarsjs.com/&quot; title=&quot;Handlebarsjs&quot; target=&quot;<em>blank&quot;&gt;http://handlebarsjs.com/&lt;/a&gt;\n  &lt;br&gt;\n&lt;a href=&quot;http://mustache.github.io/&quot; title=&quot;Mustachejs&quot; target=&quot;</em>blank&quot;&gt;http://mustache.github.io/&lt;/a&gt;\n  &lt;br&gt;\n&lt;a href=&quot;http://akdubya.github.io/dustjs/&quot; title=&quot;Dustjs&quot; target=&quot;<em>blank&quot;&gt;http://akdubya.github.io/dustjs/&lt;/a&gt;\n  &lt;br&gt;\n&lt;a href=&quot;http://documentcloud.github.io/underscore/#template&quot; title=&quot;Underscorejs&quot; target=&quot;</em>blank&quot;&gt;http://documentcloud.github.io/underscore/#template&lt;/a&gt;\n  &lt;br&gt;\n&lt;a href=&quot;https://github.com/jquery/jquery-tmpl&quot; title=&quot;jQuery tmpl&quot; target=&quot;_blank&quot;&gt;https://github.com/jquery/jquery-tmpl&lt;/a&gt;\n  &lt;br&gt;\nand many others like Jade, Haml-js, Eco, etc.</p>\n\n<h2>I suggest you read..</h2>\n\n<p>&lt;p&gt;\nSmashing Magazine - Client-Side Templating &lt;a href=&quot;http://coding.smashingmagazine.com/2012/12/05/client-side-templating/&quot; title=&quot;Smashing magazine: client side templating&quot; target=&quot;<em>blank&quot;&gt;click here.&lt;/a&gt;\n    &lt;br&gt;\nLeaving JSPs in the dust: moving LinkedIn to dust.js client-side templates &lt;a href=&quot;http://engineering.linkedin.com/frontend/leaving-jsps-dust-moving-linkedin-dustjs-client-side-templates&quot; title=&quot;Leaving JSPs in the dust: moving LinkedIn to dust.js client-side templates&quot; target=&quot;</em>blank&quot;&gt;click here.&lt;/a&gt;\n    &lt;br&gt;\nThe client-side templating throwdown: mustache, handlebars, dust.js, and more &lt;a href=&quot;http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more&quot; title=&quot;The client-side templating throwdown: mustache, handlebars, dust.js, and more&quot; target=&quot;_blank&quot;&gt;click here.&lt;/a&gt;</p>\n\n<p>&lt;/p&gt;</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Basic overview of client - side templating","meta_description":"Template rendering is very common on the web applications when we talk about back end development where technologies like Java, Ruby, PHP.. are using to render templates and show content/html, but lately about two or three years ago we could noticed that developers and companies are changing this using client side templating.","author_id":1},{"id":12,"uuid":"e815865f-ef17-4915-9812-2d408961223e","title":"Introduction to GruntJS","slug":"introduction-to-task-runner-gruntjs","markdown":" images\n<br>\n-- package.json // added new file\n<br>\n-- Gruntfile.js // added new file\n\n## Installing GruntJS\n\nOn your root project folder run the command line\n\n<pre><code data-language=\"ruby\">\nsudo npm install -g grunt-cli\n</code></pre>\n\nNow you have the grunt command line installed globally to your project\n\n## Configuring GruntJS (Gruntfile.js)\n\nthe basic structure to configure your Gruntfile.js file is simple.\n\n<pre><code data-language=\"javascript\">\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig({\n\t\t\n\t});\n\n}\n</code></pre>\n\n## Configuring the package.json\n\nYou can add tons of information on you package json and you can check all information <a href=\"http://package.json.nodejitsu.com/\" title=\"package json reference information\" target=\"blank\">here</a> but in this case let's keep it as simple as possible.\n\n<pre><code data-language=\"json\">\n{\n\t\"name\": \"GruntJS-app\",\n\t\"title\": \"GruntJS-app\",\n\t\"description\": \"Simple introduction to GruntJS set up\",\n\t\"author\": \"your name\",\n\t\"homepage\": \"your project website\",\n\t\"version\": \"0.0.1\",\n\t\"devDependencies\": {\n\t\t\"grunt\": \"~0.4.1\"\n\t}\n}\n</code></pre>\n\n## Adding plugins to use as task\n\nRemember that we want to \"watch\" for changes minify both HTML, js files and concatenate all js files in one single file\n\nNow on you wont need to go manually to package.json to add the plugins as devDependencies because you are going to run the command on your terminal to add it automatically.\n\nFirst let's install Uglify\n\n<pre><code data-language=\"ruby\">\nnpm install grunt-contrib-uglify --save-dev\n</code></pre>\n\nAnd enable the plugin inside of Gruntfile.js\n\n<pre><code data-language=\"javascript\">\ngrunt.loadNpmTasks('grunt-contrib-uglify');\n</code></pre>\n\nNow Gruntfile.js looks like this\n\n<pre><code data-language=\"javascript\">\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig({\n\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\n}\n</code></pre>\n\nInstall htmlmin\n\n<pre><code data-language=\"ruby\">\nnpm install grunt-contrib-htmlmin --save-dev\n</code></pre>\n\nEnable the plugin\n\n<pre><code data-language=\"javascript\">\ngrunt.loadNpmTasks('grunt-contrib-htmlmin');\n</code></pre>\n\nNow Gruntfile.js looks like this\n\n<pre><code data-language=\"javascript\">\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig({\n\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\tgrunt.loadNpmTasks('grunt-contrib-htmlmin');\n\n}\n</code></pre>\n\n## Setting the tasks\n\nOn your Gruntfile.js you will define the configuration for your tasks (check out the plugins documentation for configuration) as should be and the task register.\n\n<pre><code data-language=\"javascript\">\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig({\n\n\t\tuglify: {\n\t\t\tmy_target: {\n\t\t      files: {\n\t\t        'assets/js/app.min.js': // destination\n\t\t        ['assets/js/app.js', 'assets/js/main.js', 'assets/js/module.js'] // source\n\t\t      }\n\t\t    }\n\t\t},\n\n\t\thtmlmin: {\n\t\t\tdist: {\n\t\t  \t\toptions: {\n\t\t    \tremoveComments: true,\n\t\t    \tcollapseWhitespace: true\n\t\t  \t},\n\t\t  \tfiles: {\n\t\t    \t\t'dist/index.html': 'src/index.html', // destination\n\t\t\t\t\t'dist/internal.html': 'src/internal.html' // source\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\tgrunt.loadNpmTasks('grunt-contrib-htmlmin');\n\n\tgrunt.registerTask('build', ['htmlmin', 'uglify']);\n\n}\n</code></pre>\n\n## Running the tasks\n\nMake sure you have all the npm installed\n\n<pre><code data-language=\"ruby\">\nnpm install\n</code></pre>\n\nRun the task\n\n<pre><code data-language=\"ruby\">\ngrunt build\n</code></pre>\n\nDone! This is what you should have as a response.\n\n<pre><code data-language=\"ruby\">\nRunning \"htmlmin:dist\" (htmlmin) task\nFile dist/index.html created.\nFile dist/internal.html created.\n\nRunning \"uglify:my_target\" (uglify) task\nFile \"assets/js/app.min.js\" created.\n\nDone, without errors.\n</code></pre>\n\n## Adding and configuring watch\n\nRemember \"no waste of time\" with repetitive tasks right? so to not need run \"grunt build\" every time after changes let's add the plugin watch.\n\nInstall watch\n\n<pre><code data-language=\"ruby\">\nnpm install grunt-contrib-watch --save-dev\n</code></pre>\n\nEnable the plugin and configure the watch task\n\n<pre><code data-language=\"javascript\">\ngrunt.loadNpmTasks('grunt-contrib-watch');\n\ngrunt.event.on('watch', function(action, filepath) {\n  grunt.log.writeln(filepath + ' has ' + action);\n});\n</code></pre>\n\nNow Gruntfile.js looks like this (check out the plugin documentation for configuration).\n\n<pre><code data-language=\"javascript\">\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig({\n\n\t\tuglify: {\n\t\t\tmy_target: {\n\t\t      files: {\n\t\t        'assets/js/app.min.js': // destination\n\t\t        ['assets/js/app.js', 'assets/js/main.js', 'assets/js/module.js'] // source\n\t\t      }\n\t\t    }\n\t\t},\n\n\t\thtmlmin: {\n\t\t\tdist: {\n\t\t  \t\toptions: {\n\t\t    \tremoveComments: true,\n\t\t    \tcollapseWhitespace: true\n\t\t  \t},\n\t\t  \tfiles: {\n\t\t    \t\t'dist/index.html': 'src/index.html', // destination\n\t\t\t\t\t'dist/internal.html': 'src/internal.html' // source\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\twatch: {\n\t\t    src: {\n\t\t      files: ['src/*.html', 'assets/js/*.js', 'assets/css/*.css', '!assets/js/app.min.js'], // ! means not\n\t\t      tasks: ['build'],\n\t\t    },\n\t\t}\n\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\tgrunt.loadNpmTasks('grunt-contrib-htmlmin');\n\tgrunt.loadNpmTasks('grunt-contrib-watch');\n\n\tgrunt.registerTask('build', ['htmlmin', 'uglify']);\n\n\tgrunt.event.on('watch', function(action, filepath) {\n\t  grunt.log.writeln(filepath + ' has ' + action);\n\t});\n\n}\n</code></pre>\n\nNow on you will just need to run \"grunt watch\" so every time you change something in the files set up to watch will run the task \"build\"\n\n<pre><code data-language=\"ruby\">\ngrunt watch\n</code></pre>\n\nand this is what you should see after run the command\n\n<pre><code data-language=\"ruby\">\nRunning \"watch\" task\nWaiting...\n</code></pre>\n\nTo stop watch press \"control + c\" \n\n## Conclusion\n\nGruntJS is AWESOME and you can do much more complex things with it.\n<br>\nCheck out the example on <a href=\"https://github.com/weblancaster/blog-examples/tree/master/GruntJS-app\" title=\"example on github\" target=\"blank\">Github</a>.\n\nNow you have more time to play with new experiments.\n<br>\nCheers!\n\n\n\n\n","html":"<p> images\n&lt;br&gt;\n-- package.json // added new file\n&lt;br&gt;\n-- Gruntfile.js // added new file</p>\n\n<h2>Installing GruntJS</h2>\n\n<p>On your root project folder run the command line</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nsudo npm install -g grunt-cli\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now you have the grunt command line installed globally to your project</p>\n\n<h2>Configuring GruntJS (Gruntfile.js)</h2>\n\n<p>the basic structure to configure your Gruntfile.js file is simple.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nmodule.exports = function(grunt) {</p>\n\n<pre><code>grunt.initConfig({\n\n});</code></pre>\n\n<p>}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Configuring the package.json</h2>\n\n<p>You can add tons of information on you package json and you can check all information &lt;a href=&quot;http://package.json.nodejitsu.com/&quot; title=&quot;package json reference information&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt; but in this case let&#39;s keep it as simple as possible.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;json&quot;&gt;\n{\n\t&quot;name&quot;: &quot;GruntJS-app&quot;,\n\t&quot;title&quot;: &quot;GruntJS-app&quot;,\n\t&quot;description&quot;: &quot;Simple introduction to GruntJS set up&quot;,\n\t&quot;author&quot;: &quot;your name&quot;,\n\t&quot;homepage&quot;: &quot;your project website&quot;,\n\t&quot;version&quot;: &quot;0.0.1&quot;,\n\t&quot;devDependencies&quot;: {\n\t\t&quot;grunt&quot;: &quot;~0.4.1&quot;\n\t}\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Adding plugins to use as task</h2>\n\n<p>Remember that we want to &quot;watch&quot; for changes minify both HTML, js files and concatenate all js files in one single file</p>\n\n<p>Now on you wont need to go manually to package.json to add the plugins as devDependencies because you are going to run the command on your terminal to add it automatically.</p>\n\n<p>First let&#39;s install Uglify</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nnpm install grunt-contrib-uglify --save-dev\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>And enable the plugin inside of Gruntfile.js</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now Gruntfile.js looks like this</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nmodule.exports = function(grunt) {</p>\n\n<pre><code>grunt.initConfig({\n\n});\n\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);</code></pre>\n\n<p>}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Install htmlmin</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nnpm install grunt-contrib-htmlmin --save-dev\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Enable the plugin</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\ngrunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now Gruntfile.js looks like this</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nmodule.exports = function(grunt) {</p>\n\n<pre><code>grunt.initConfig({\n\n});\n\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\ngrunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);</code></pre>\n\n<p>}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Setting the tasks</h2>\n\n<p>On your Gruntfile.js you will define the configuration for your tasks (check out the plugins documentation for configuration) as should be and the task register.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nmodule.exports = function(grunt) {</p>\n\n<pre><code>grunt.initConfig({\n\n\tuglify: {\n\t\tmy_target: {\n\t      files: {\n\t        &#39;assets/js/app.min.js&#39;: // destination\n\t        [&#39;assets/js/app.js&#39;, &#39;assets/js/main.js&#39;, &#39;assets/js/module.js&#39;] // source\n\t      }\n\t    }\n\t},\n\n\thtmlmin: {\n\t\tdist: {\n\t  \t\toptions: {\n\t    \tremoveComments: true,\n\t    \tcollapseWhitespace: true\n\t  \t},\n\t  \tfiles: {\n\t    \t\t&#39;dist/index.html&#39;: &#39;src/index.html&#39;, // destination\n\t\t\t\t&#39;dist/internal.html&#39;: &#39;src/internal.html&#39; // source\n\t\t\t}\n\t\t}\n\t}\n\n});\n\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\ngrunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);\n\ngrunt.registerTask(&#39;build&#39;, [&#39;htmlmin&#39;, &#39;uglify&#39;]);</code></pre>\n\n<p>}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Running the tasks</h2>\n\n<p>Make sure you have all the npm installed</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nnpm install\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Run the task</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngrunt build\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Done! This is what you should have as a response.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nRunning &quot;htmlmin:dist&quot; (htmlmin) task\nFile dist/index.html created.\nFile dist/internal.html created.</p>\n\n<p>Running &quot;uglify:my_target&quot; (uglify) task\nFile &quot;assets/js/app.min.js&quot; created.</p>\n\n<p>Done, without errors.\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Adding and configuring watch</h2>\n\n<p>Remember &quot;no waste of time&quot; with repetitive tasks right? so to not need run &quot;grunt build&quot; every time after changes let&#39;s add the plugin watch.</p>\n\n<p>Install watch</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nnpm install grunt-contrib-watch --save-dev\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Enable the plugin and configure the watch task</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\ngrunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);</p>\n\n<p>grunt.event.on(&#39;watch&#39;, function(action, filepath) {\n  grunt.log.writeln(filepath + &#39; has &#39; + action);\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now Gruntfile.js looks like this (check out the plugin documentation for configuration).</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nmodule.exports = function(grunt) {</p>\n\n<pre><code>grunt.initConfig({\n\n\tuglify: {\n\t\tmy_target: {\n\t      files: {\n\t        &#39;assets/js/app.min.js&#39;: // destination\n\t        [&#39;assets/js/app.js&#39;, &#39;assets/js/main.js&#39;, &#39;assets/js/module.js&#39;] // source\n\t      }\n\t    }\n\t},\n\n\thtmlmin: {\n\t\tdist: {\n\t  \t\toptions: {\n\t    \tremoveComments: true,\n\t    \tcollapseWhitespace: true\n\t  \t},\n\t  \tfiles: {\n\t    \t\t&#39;dist/index.html&#39;: &#39;src/index.html&#39;, // destination\n\t\t\t\t&#39;dist/internal.html&#39;: &#39;src/internal.html&#39; // source\n\t\t\t}\n\t\t}\n\t},\n\n\twatch: {\n\t    src: {\n\t      files: [&#39;src/*.html&#39;, &#39;assets/js/*.js&#39;, &#39;assets/css/*.css&#39;, &#39;!assets/js/app.min.js&#39;], // ! means not\n\t      tasks: [&#39;build&#39;],\n\t    },\n\t}\n\n});\n\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\ngrunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);\ngrunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);\n\ngrunt.registerTask(&#39;build&#39;, [&#39;htmlmin&#39;, &#39;uglify&#39;]);\n\ngrunt.event.on(&#39;watch&#39;, function(action, filepath) {\n  grunt.log.writeln(filepath + &#39; has &#39; + action);\n});</code></pre>\n\n<p>}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now on you will just need to run &quot;grunt watch&quot; so every time you change something in the files set up to watch will run the task &quot;build&quot;</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngrunt watch\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>and this is what you should see after run the command</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nRunning &quot;watch&quot; task\nWaiting...\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>To stop watch press &quot;control + c&quot; </p>\n\n<h2>Conclusion</h2>\n\n<p>GruntJS is AWESOME and you can do much more complex things with it.\n&lt;br&gt;\nCheck out the example on &lt;a href=&quot;https://github.com/weblancaster/blog-examples/tree/master/GruntJS-app&quot; title=&quot;example on github&quot; target=&quot;blank&quot;&gt;Github&lt;/a&gt;.</p>\n\n<p>Now you have more time to play with new experiments.\n&lt;br&gt;\nCheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Introduction to GruntJS","meta_description":"Which developer never wasted time doing repetitive and boring tasks instead of being focused on what we do best \"Code\".","author_id":1},{"id":13,"uuid":"9b4846b8-a4dd-4692-86ed-7f7eb8c6faec","title":"Tonight's inspiration","slug":"tonights-inspiration","markdown":"\n \nI haven't posted anything a while which is a shame but I had good reasons and I should be doing a post about it on my next post but this post is made to show what inspire me love this world what makes me think how wonderful things are and how much we can learn from our world.\n\n## Love and Life\n\nLove. Perhaps just a word for some but at the same time very powerful. Love drives us to different things in life. Good things and bad things. Both..So many perspectives from different cultures and races but same origin. Your inside.\n\nLove inspire me in some many different ways and I'm not ashamed to say I believe in true love.\nAnd here it's very interesting to see some ways people want to express love.\n\nYou decide which one suits you.\n\n<div class=\"fluidMedia\">\n  <iframe src=\"//player.vimeo.com/video/22439234\" width=\"500\" height=\"281\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n</div>\n\n<br>\n\n<div class=\"fluidMedia\">\n  <iframe src=\"//player.vimeo.com/video/35699279\" width=\"500\" height=\"281\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n</div>\n\n<br>\n\n<div class=\"fluidMedia\">\n  <iframe src=\"//player.vimeo.com/video/71495477?color=f7f9fa\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n</div>\n\n<br>\n\n<div class=\"fluidMedia\">\n  <iframe src=\"//player.vimeo.com/video/61361236\" width=\"500\" height=\"281\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n</div>\n\n## Technology and Inspiration\n\nAnother thing that inspires me can, changed and has being changed the world as love for good or for bad. Technology..but on this post I will show you what inspired me tonight..\n\nFirst one is how Netflix is delivering high quality WebKit based UIs to televisions, game consoles and Blu-ray players.\nthis talk will discuss fluid animation with hardware acceleration, achieving high framerates using accelerated compositing, responding to constant user input, as well as balancing strategies for best performance on over 450 high-end to low-end devices.\n\n<div class=\"fluidMedia\">\n  <iframe src=\"//www.youtube.com/embed/xuMWhto62Eo\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n</div>\n\n<br>\n\nSecond one discuss how programming has being changing people and the future of programming.\nThe way the speaker approach the subject is a very creative and interesting thing.\n\n<div class=\"fluidMedia\">\n  <iframe src=\"//player.vimeo.com/video/71278954?title=0&amp;byline=0&amp;portrait=0\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n</div>\n\n<br>\n\nIf it all doesn't makes sense to you don't worry lot of things in life doesn't makes sense.\n\n\n\n\n","html":"<p>I haven&#39;t posted anything a while which is a shame but I had good reasons and I should be doing a post about it on my next post but this post is made to show what inspire me love this world what makes me think how wonderful things are and how much we can learn from our world.</p>\n\n<h2>Love and Life</h2>\n\n<p>Love. Perhaps just a word for some but at the same time very powerful. Love drives us to different things in life. Good things and bad things. Both..So many perspectives from different cultures and races but same origin. Your inside.</p>\n\n<p>Love inspire me in some many different ways and I&#39;m not ashamed to say I believe in true love.\nAnd here it&#39;s very interesting to see some ways people want to express love.</p>\n\n<p>You decide which one suits you.</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n  &lt;iframe src=&quot;//player.vimeo.com/video/22439234&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n  &lt;iframe src=&quot;//player.vimeo.com/video/35699279&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n  &lt;iframe src=&quot;//player.vimeo.com/video/71495477?color=f7f9fa&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n  &lt;iframe src=&quot;//player.vimeo.com/video/61361236&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<h2>Technology and Inspiration</h2>\n\n<p>Another thing that inspires me can, changed and has being changed the world as love for good or for bad. Technology..but on this post I will show you what inspired me tonight..</p>\n\n<p>First one is how Netflix is delivering high quality WebKit based UIs to televisions, game consoles and Blu-ray players.\nthis talk will discuss fluid animation with hardware acceleration, achieving high framerates using accelerated compositing, responding to constant user input, as well as balancing strategies for best performance on over 450 high-end to low-end devices.</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n  &lt;iframe src=&quot;//www.youtube.com/embed/xuMWhto62Eo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>Second one discuss how programming has being changing people and the future of programming.\nThe way the speaker approach the subject is a very creative and interesting thing.</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n  &lt;iframe src=&quot;//player.vimeo.com/video/71278954?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>If it all doesn&#39;t makes sense to you don&#39;t worry lot of things in life doesn&#39;t makes sense.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Tonight's inspiration","meta_description":"I haven't posted anything a while which is a shame but I had good reasons and I should be doing why on my next post but this post is made to show what inspire me in some nights, what makes me think how wonderful world is and how much we cna learn from it.","author_id":1},{"id":14,"uuid":"d20e4902-e422-4d14-af51-6e3bc20eab3b","title":"How I built Lollagram with Instagram real time API","slug":"how-i-built-lollagram-lollapalooza-instagram-real-time-api","markdown":"\n\n## What is Lollagram?\n\n[from the Application] <a href=\"http://www.lollagram.com\" target=\"_blank\" title=\"Lollagram - real time lollapalooza\">Lollagram</a>  is a labor of love that’s designed to help you keep track of the Lollapalooza experience, through the eyes (or, more accurately, snapshots) of music lovers on the ground at Grant Park. Lollagram takes advantage of the Instagram Real Time API and aggregates the moments at Lollapalooza, creating a visual record of the bands, food, people, and city that make up this great musical tradition. With 45 million photos being uploaded to Instagram each day, we're excited to present snapshots from Lollapalooza 2013.\n\n## The new version\n\nCheck out the source code on <a href=\"https://github.com/weblancaster/instagram-real-time\" target=\"_blank\" title=\"github Lollagram - real time lollagram cosuming Instagram real time API\">Lollagram source code.</a>\n\nThe old version of Lollagram was a simple website built in PHP where you needed to click on the refresh button to pull the latest pictures shared on Instagram with the hashtags #lollapalooza #lollapalooza2012 or #lolla2012\n\nWhile I was working for Golinharris I was also working on my side projects/experiments using NodeJS so I think two weeks before the event I started to talk with my co-worker and designer Daniel Branca that I was thinking to use cutting edge technologies to do a real time Application therefore much more engaging.\n\nI was also about to leave the company to another company and I had one more week at Golinharris but I really wanted to work on it for fun and learning to use technologies like NodeJs, Socket.io, Client Side template (HandlebarsJs) and responsive web design where the user can follow on their smartphone, tablet, desktop or even on TV (and Yes I did for \"free\").\n\nI never had work with real time Application so I started to read and do some experiments with Socket.io coding a real time chat (as most developers do).\nAfter understand the basic concept of Socket.io \"Real Time\" and discuss all the most important details of the Application with Dan (the designer) I started code the Application.\n\nAs I said before at that time I was leaving the company to work for another company and I was also preparing my slides/speak for the biggest conference in Brazil for Front End Developers/Engineers which I was invited to speak (topic for another post) and it would be in the same day I had to release the Application.\n\nSo in one week I had to start at the new company understand the new workflow, finish Lollagram Application and finish my slides/speak for the conference in Brazil.\n\n\n## The Application\n\nI'm not going to describe in a lot of details it will be more a overview how I did it.\n\nAfter understand how the Instagram real time API work I started to code the Back-end utilizing NodeJS (<a href=\"http://expressjs.com/\" target=\"_blank\" title=\"ExpressJS Framework\">ExpressJS</a>) and hosted on <a href=\"http://www.heroku.com\" target=\"Heroku cloud\" title=\"Heroku cloud\">Heroku</a> which is awesome and I could added monitoring to the server to debug and make sure everything on the server was/is running alright. <br>\nI tried to find code examples to gain some time but I found anything good enough. Or the code were too old or was developed PHP or RoR so I ended up utilizing the library called <a href=\"https://github.com/mckelvey/instagram-node-lib\" targte=\"_blank\" title=\"Instagram node lib\">instagram-node-lib</a> which helped me a lot and I gained some time.\n\nAfter register my Application on Instagram and get my \"client id\" and \"client secret\" the most important things I needed to get it working was the steps below.\n\nRemember I'm using the <a href=\"https://github.com/mckelvey/instagram-node-lib\" targte=\"_blank\" title=\"Instagram node lib\">instagram-node-lib</a> so we don't need to do from scratch since time is/was very precious and we don't want to reinvent the wheel.\n\n### Basic setup\n\n<pre><code data-language=\"javascript\">\nInstagram.set('client_id', clientID);\nInstagram.set('client_secret', clientSecret);\nInstagram.set('callback_url', 'http://YOUR_URL.COM/callback');\nInstagram.set('redirect_uri', 'http://YOUR_URL.com');\n</code></pre>\n\n### The Handshake\n\nThe <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\" target=\"\" title=\"Handshake\">Handshake</a> is the confirmation connection between the servers.\n\n<pre><code data-language=\"javascript\">\napp.get('/callback', function(req, res){\n    var handshake =  Instagram.subscriptions.handshake(req, res);\n});\n</code></pre>\n\n### First load\n\nWhen you access the Application for the first time you can noticed thirteen pictures are loaded.\nHere I request the latest shared pictures on Instagram with hashtag #lollapalooza and utilizing Socket.io I transmit it to the client side as json.\n\nServer sends the data to the client side.\n\n<pre><code data-language=\"javascript\">\nio.sockets.on('connection', function (socket) {\n  Instagram.tags.recent({ \n      name: 'lollapalooza',\n      complete: function(data) {\n        socket.emit('firstShow', { firstShow: data });\n      }\n  });\n});\n</code></pre>\n\nOn my method \"mostRecent\" the Socket.io on the client receives the data and parse/process using client side templating (HandlebarsJs) and append to the Application showing the latest pictures shared on Instagram.\n\n<pre><code data-language=\"javascript\">\nmostRecent: function() {\n    socket.on('firstShow', function (data) {\n        var\n            query = data,\n            source = $('#firstShow-tpl').html(),\n            compiledTemplate = Handlebars.compile(source),\n            result = compiledTemplate(query),\n            imgWrap = $('#imgContent');\n\n        imgWrap.html(result);\n    });\n},\n</code></pre>\n\n### Subscribing to hashtags\n\nTo receive the last updates from Instagram as real time first I needed to subscribe to the hashtags.\n\n<pre><code data-language=\"javascript\">\nInstagram.subscriptions.subscribe({\n  object: 'tag',\n  object_id: 'lollapalooza',\n  aspect: 'media',\n  callback_url: 'http://YOUR_URL.com/callback',\n  type: 'subscription',\n  id: '#'\n});\n</code></pre>\n\n### Real time \"time\"\n\nAfter subscribe to the hashtags I started to receive \"notifications\" from Instagram when someone shared pictures with the hashtags subscribed which is pretty cool specially when lots of people share and makes even more engaging.\n\nOne thing that I noticed is that Instagram real time API is unstable and if you go to the google groups where developers post problems and discuss solutions you can see there's a lot to get better.\nAnother thing is that you can receive 5000 \"notifications\" per hour and if you pass the limit the Instagram block your Application.\n\nHere I send the url to the client side to make the Ajax request but theres another way to do it which is access the json response from Instagram \"notification\" on the server and get the last image to send to the client.\n\n<pre><code data-language=\"javascript\">\napp.post('/callback', function(req, res) {\n    var data = req.body;\n\n    data.forEach(function(tag) {\n      var url = 'https://api.instagram.com/v1/tags/' + tag.object_id + '/media/recent?client_id=479edbf0004c42758987cf0244afd3ef';\n      sendMessage(url);\n\n    });\n    res.end();\n});\n\nfunction sendMessage(url) {\n  io.sockets.emit('show', { show: url });\n}\n</code></pre>\n\nOn the client side I receive the data \"url\" and do Ajax request then I call my method to render the client side template.\n\n<pre><code data-language=\"javascript\">\ngetData: function() {\n    var self = this;\n    socket.on('show', function(data) {\n        var url = data.show;\n        $.ajax({\n            url: url,\n            type: 'POST',\n            crossDomain: true,\n            dataType: 'jsonp'\n        }).done(function (data) {\n            self.renderTemplate(data);\n        }); \n    });\n}\n</code></pre>\n\n### How to unsubscribe\n\nTo unsubscribe is easy it just need the tag \"ID\" and done.\n\n<pre><code data-language=\"javascript\">\nInstagram.subscriptions.unsubscribe({ id: '#######' });\n</code></pre>\n\n### Final thoughts\n\n- Work with Real Time is pretty cool and fun.\n- Instagram real time API isn't great but does the job.\n- Work in three different important things in one week is possible with one pack with ten monster energetic drink and less than four hours of sleep per night.\n- People love to share pictures. People love to see pictures.\n\nCheck out the source code on <a href=\"https://github.com/weblancaster/instagram-real-time\" target=\"_blank\" title=\"github Lollagram - real time lollagram cosuming Instagram real time API\">Lollagram source code.</a>\n\n\n\n\n\n\n\n\n\n\n\n","html":"<h2>What is Lollagram?</h2>\n\n<p>[from the Application] &lt;a href=&quot;http://www.lollagram.com&quot; target=&quot;_blank&quot; title=&quot;Lollagram - real time lollapalooza&quot;&gt;Lollagram&lt;/a&gt;  is a labor of love that’s designed to help you keep track of the Lollapalooza experience, through the eyes (or, more accurately, snapshots) of music lovers on the ground at Grant Park. Lollagram takes advantage of the Instagram Real Time API and aggregates the moments at Lollapalooza, creating a visual record of the bands, food, people, and city that make up this great musical tradition. With 45 million photos being uploaded to Instagram each day, we&#39;re excited to present snapshots from Lollapalooza 2013.</p>\n\n<h2>The new version</h2>\n\n<p>Check out the source code on &lt;a href=&quot;https://github.com/weblancaster/instagram-real-time&quot; target=&quot;_blank&quot; title=&quot;github Lollagram - real time lollagram cosuming Instagram real time API&quot;&gt;Lollagram source code.&lt;/a&gt;</p>\n\n<p>The old version of Lollagram was a simple website built in PHP where you needed to click on the refresh button to pull the latest pictures shared on Instagram with the hashtags #lollapalooza #lollapalooza2012 or #lolla2012</p>\n\n<p>While I was working for Golinharris I was also working on my side projects/experiments using NodeJS so I think two weeks before the event I started to talk with my co-worker and designer Daniel Branca that I was thinking to use cutting edge technologies to do a real time Application therefore much more engaging.</p>\n\n<p>I was also about to leave the company to another company and I had one more week at Golinharris but I really wanted to work on it for fun and learning to use technologies like NodeJs, Socket.io, Client Side template (HandlebarsJs) and responsive web design where the user can follow on their smartphone, tablet, desktop or even on TV (and Yes I did for &quot;free&quot;).</p>\n\n<p>I never had work with real time Application so I started to read and do some experiments with Socket.io coding a real time chat (as most developers do).\nAfter understand the basic concept of Socket.io &quot;Real Time&quot; and discuss all the most important details of the Application with Dan (the designer) I started code the Application.</p>\n\n<p>As I said before at that time I was leaving the company to work for another company and I was also preparing my slides/speak for the biggest conference in Brazil for Front End Developers/Engineers which I was invited to speak (topic for another post) and it would be in the same day I had to release the Application.</p>\n\n<p>So in one week I had to start at the new company understand the new workflow, finish Lollagram Application and finish my slides/speak for the conference in Brazil.</p>\n\n<h2>The Application</h2>\n\n<p>I&#39;m not going to describe in a lot of details it will be more a overview how I did it.</p>\n\n<p>After understand how the Instagram real time API work I started to code the Back-end utilizing NodeJS (&lt;a href=&quot;http://expressjs.com/&quot; target=&quot;<em>blank&quot; title=&quot;ExpressJS Framework&quot;&gt;ExpressJS&lt;/a&gt;) and hosted on &lt;a href=&quot;http://www.heroku.com&quot; target=&quot;Heroku cloud&quot; title=&quot;Heroku cloud&quot;&gt;Heroku&lt;/a&gt; which is awesome and I could added monitoring to the server to debug and make sure everything on the server was/is running alright. &lt;br&gt;\nI tried to find code examples to gain some time but I found anything good enough. Or the code were too old or was developed PHP or RoR so I ended up utilizing the library called &lt;a href=&quot;https://github.com/mckelvey/instagram-node-lib&quot; targte=&quot;</em>blank&quot; title=&quot;Instagram node lib&quot;&gt;instagram-node-lib&lt;/a&gt; which helped me a lot and I gained some time.</p>\n\n<p>After register my Application on Instagram and get my &quot;client id&quot; and &quot;client secret&quot; the most important things I needed to get it working was the steps below.</p>\n\n<p>Remember I&#39;m using the &lt;a href=&quot;https://github.com/mckelvey/instagram-node-lib&quot; targte=&quot;_blank&quot; title=&quot;Instagram node lib&quot;&gt;instagram-node-lib&lt;/a&gt; so we don&#39;t need to do from scratch since time is/was very precious and we don&#39;t want to reinvent the wheel.</p>\n\n<h3>Basic setup</h3>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nInstagram.set(&#39;client<em>id&#39;, clientID);\nInstagram.set(&#39;client</em>secret&#39;, clientSecret);\nInstagram.set(&#39;callback<em>url&#39;, &#39;http://YOUR</em>URL.COM/callback&#39;);\nInstagram.set(&#39;redirect<em>uri&#39;, &#39;http://YOUR</em>URL.com&#39;);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>The Handshake</h3>\n\n<p>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Transmission<em>Control</em>Protocol&quot; target=&quot;&quot; title=&quot;Handshake&quot;&gt;Handshake&lt;/a&gt; is the confirmation connection between the servers.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\napp.get(&#39;/callback&#39;, function(req, res){\n    var handshake =  Instagram.subscriptions.handshake(req, res);\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>First load</h3>\n\n<p>When you access the Application for the first time you can noticed thirteen pictures are loaded.\nHere I request the latest shared pictures on Instagram with hashtag #lollapalooza and utilizing Socket.io I transmit it to the client side as json.</p>\n\n<p>Server sends the data to the client side.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nio.sockets.on(&#39;connection&#39;, function (socket) {\n  Instagram.tags.recent({ \n      name: &#39;lollapalooza&#39;,\n      complete: function(data) {\n        socket.emit(&#39;firstShow&#39;, { firstShow: data });\n      }\n  });\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>On my method &quot;mostRecent&quot; the Socket.io on the client receives the data and parse/process using client side templating (HandlebarsJs) and append to the Application showing the latest pictures shared on Instagram.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nmostRecent: function() {\n    socket.on(&#39;firstShow&#39;, function (data) {\n        var\n            query = data,\n            source = $(&#39;#firstShow-tpl&#39;).html(),\n            compiledTemplate = Handlebars.compile(source),\n            result = compiledTemplate(query),\n            imgWrap = $(&#39;#imgContent&#39;);</p>\n\n<pre><code>    imgWrap.html(result);\n});</code></pre>\n\n<p>},\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Subscribing to hashtags</h3>\n\n<p>To receive the last updates from Instagram as real time first I needed to subscribe to the hashtags.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nInstagram.subscriptions.subscribe({\n  object: &#39;tag&#39;,\n  object<em>id: &#39;lollapalooza&#39;,\n  aspect: &#39;media&#39;,\n  callback</em>url: &#39;http://YOUR_URL.com/callback&#39;,\n  type: &#39;subscription&#39;,\n  id: &#39;#&#39;\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Real time &quot;time&quot;</h3>\n\n<p>After subscribe to the hashtags I started to receive &quot;notifications&quot; from Instagram when someone shared pictures with the hashtags subscribed which is pretty cool specially when lots of people share and makes even more engaging.</p>\n\n<p>One thing that I noticed is that Instagram real time API is unstable and if you go to the google groups where developers post problems and discuss solutions you can see there&#39;s a lot to get better.\nAnother thing is that you can receive 5000 &quot;notifications&quot; per hour and if you pass the limit the Instagram block your Application.</p>\n\n<p>Here I send the url to the client side to make the Ajax request but theres another way to do it which is access the json response from Instagram &quot;notification&quot; on the server and get the last image to send to the client.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\napp.post(&#39;/callback&#39;, function(req, res) {\n    var data = req.body;</p>\n\n<pre><code>data.forEach(function(tag) {\n  var url = &#39;https://api.instagram.com/v1/tags/&#39; + tag.object_id + &#39;/media/recent?client_id=479edbf0004c42758987cf0244afd3ef&#39;;\n  sendMessage(url);\n\n});\nres.end();</code></pre>\n\n<p>});</p>\n\n<p>function sendMessage(url) {\n  io.sockets.emit(&#39;show&#39;, { show: url });\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>On the client side I receive the data &quot;url&quot; and do Ajax request then I call my method to render the client side template.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\ngetData: function() {\n    var self = this;\n    socket.on(&#39;show&#39;, function(data) {\n        var url = data.show;\n        $.ajax({\n            url: url,\n            type: &#39;POST&#39;,\n            crossDomain: true,\n            dataType: &#39;jsonp&#39;\n        }).done(function (data) {\n            self.renderTemplate(data);\n        }); \n    });\n}\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>How to unsubscribe</h3>\n\n<p>To unsubscribe is easy it just need the tag &quot;ID&quot; and done.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nInstagram.subscriptions.unsubscribe({ id: &#39;#######&#39; });\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Final thoughts</h3>\n\n<ul><li>Work with Real Time is pretty cool and fun.</li><li>Instagram real time API isn&#39;t great but does the job.</li><li>Work in three different important things in one week is possible with one pack with ten monster energetic drink and less than four hours of sleep per night.</li><li>People love to share pictures. People love to see pictures.</li></ul>\n\n<p>Check out the source code on &lt;a href=&quot;https://github.com/weblancaster/instagram-real-time&quot; target=&quot;_blank&quot; title=&quot;github Lollagram - real time lollagram cosuming Instagram real time API&quot;&gt;Lollagram source code.&lt;/a&gt;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"How I built Lollagram with Instagram real time API","meta_description":"A month ago was the event Lollapalooza in Chicago and some co-workers from my former company had an idea two years ago (if I'm not wrong) to develop a web Application showing latest pictures people were sharing from the event..and this year I wanted to take it to the next level.","author_id":1},{"id":15,"uuid":"8bd258d1-1c96-43fc-9ea7-256c1e2c751a","title":"Deploying Node.js server on Heroku Cloud","slug":"deploying-nodejs-on-heroku-cloud","markdown":"\n\n[post under improvements]\n\nAs a developer I have been always curious to learn and try new technologies that can improve my skill and help me build better Web Applications..So today I'm going to try help you set up a simple Node.js server on Heroku Cloud using my small open source project aims deploy even faster Node.js applications.\n\n## Why Heroku\n\n<a href=\"http://www.heroku.com\" target=\"\"_blank title=\"\">Heroku</a> is a cloud application platform where you can build and deploy web apps\nwith the technologies you know as Java, Ruby, Closure, Node.js, Python and Scala..Heroku uses integration with Git so you can deploy your Application\nsimply pushing to master. Oh and It's FREE!\n\nI have four web apps hosted on heroku but two are for public access this blog/portfolio running on Ruby and Lollagram running on Node.js.\n\n## Why Node.js\n\nIt's Javascript...on the Server!\n\n<iframe src=\"http://giphy.com/embed/13k1e8OMVO2a3K\" frameBorder=\"0\" allowFullScreen=\"allowFullScreen\"></iframe>\n\n<br>\n\nNo, But seriously. Javascript is well known by us Front End Developers/Engineers and even designers. <br>\nThat's already one good reason but the main \"real\" reasons are Node.js is all about making event-driven (Ajax can be done on the server side), low-latency, non-blocking I/O...perfect for real time. <br>\nNode.js makes a much smaller footprint on your web server It allocates web server resources on an as-needed basis, not pre-allocating a large chunk of resources for each user. For example, Apache might assign 8MB to a user, while Node assigns 8KB.\n\n## Heroku set up\n\nI'm going to assume you have account on Heroku (it's free) and the <a href=\"https://toolbelt.heroku.com/\" title=\"toolbelt kit\" target=\"_blank\">toolbelt kit</a> installed and you also have <a href=\"http://Nodejs.org/\" title=\"Node.js\" target=\"_blank\">Node.js</a> installed.\n\n## Let's get it start\n\nFirst of all (after everything installed) create a new folder (whatever-name-you-want) then open your terminal go to your folder and type..\n\n<pre><code data-language=\"ruby\">\ngit init\n</code></pre>\n\nthen\n\n<pre><code data-language=\"ruby\">\ngit add .\n</code></pre>\n\nthen\n\n<pre><code data-language=\"ruby\">\ngit commit -m \"first commit\"\n</code></pre>\n\nNow you have git initialized..time to create a Heroku app. <br>\nFirst thing you need to login to Heroku (remember that we are doing everything from the command line on terminal)\n\n<pre><code data-language=\"ruby\">\nheroku login\n</code></pre>\n\n<pre><code data-language=\"ruby\">\nheroku create name-of-your-app\n</code></pre>\n\nDone! You just need to push your code.\n\n<pre><code data-language=\"ruby\">\ngit push\n</code></pre>\n\nYou can access your Web App url on www.your-app-name.heroku.com\n\nOh wait! What is this?\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/heroku-404.png\" alt=\"Heroku 404\">\n</div>\n\n<br>\n\nTo make your Web App run on Heroku you need to run your Web App in one of those languages I said right on the beginning of this post.\n\nToday we are going to run and deploy a simple Node.js/Express.js Application..since I have been using Heroku and Node.js for all my personal/aside projects I created a Express.js boilerplate to run and deploy fast and easy with <a href=\"/blog/introduction-to-task-runner-gruntjs/\" target=\"_blank\" title=\"introduction to Grunt.js\">Grunt.js</a> included so you can watch for changes on your files to minify CSS and uglify JS. I also included static assets and NO Jade (jade is native on Express.js) so you can code your normal HTML instead of Jade.\n\nGo to my Github repository <a href=\"https://github.com/weblancaster/expressjs-static-boilerplate\" target=\"_blank\" title=\"Express.js static boilerplate\">Express.js static boilerplate</a> and download the zip file then extract and copy everything has inside of \"expressjs-static-boilerplate\" folder to your Web App folder.\n\n## Running Node.js\n\nAfter download my boilerplate let's install the dependencies and run our Node.js server\n\n<pre><code data-language=\"ruby\">\nsudo npm install -g\n</code></pre>\n\nEnter your password.\nYou should see something like the image below.. notice that not every log is showed on the image..\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/success-image.png\" alt=\"success image\">\n</div>\n\n<br>\n\nAll Node dependencies are installed and now you can start run your server.\n\n<pre><code data-language=\"ruby\">\nnode server.js\n</code></pre>\n\nOr to not need to quit the server \"control + c\" every time you do any change I also added a monitor to the boilerplate so every time you do your changes and save the monitor you automatically re-run the server.\n\n<pre><code data-language=\"ruby\">\nnodemon server.js\n</code></pre>\n\n## Running Grunt.js\n\nAfter install all the Node.js dependencies you can start run your tasks to minify CSS and uglify JS. <br>\nOpen a new tab on your terminal and run the command.\n\n<pre><code data-language=\"ruby\">\ngrunt build\n</code></pre>\n\nThis is the message you should get.\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/grunt-build.png\" alt=\"grunt build\">\n</div>\n\n<br>\n\nBut still not quite good enough because we would need to build every time we did any change.\nSo let's start to watch for changes on the files.\n\n<pre><code data-language=\"ruby\">\ngrunt watch\n</code></pre>\n\nNow every time you do any change and save the file grunt you build automatically.\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/grunt-watch.png\" alt=\"grunt watch\">\n</div>\n\n<br>\n\nOk. That's pretty cool right?!.\n\n## Deploying and Running on Heroku\n\nNow let's push to Heroku and see if it works.\n\n<pre><code data-language=\"ruby\">\ngit add .\n</code></pre>\n\n<pre><code data-language=\"ruby\">\ngit commit -m \"added express boilerplate\"\n</code></pre>\n\n<pre><code data-language=\"ruby\">\ngit push origin master\n</code></pre>\n\nand this is what happened..\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/no-support.png\" alt=\"no support\">\n</div>\n\n<br>\n\nIf you read the message you will see \"Push rejected, no Cedar-supported app detected\" so let's add support to make this baby work..\nEvery Web App on Heroku needs a file to tell Heroku what are we deploying..\n\nIn this case we need a \"Procfile\". So create a new file named \"Procfile\" and type \"web: node server.js\" save inside your app folder. <br>\n\nThen you need to activate your server and tell Heroku to run 1 \"Cedar\" (one cedar is free hosting).\n\n<pre><code data-language=\"ruby\">\nheroku ps:scale web=1\n</code></pre>\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/cedar.png\" alt=\"no support\">\n</div>\n\n<br>\n\nRepeat the push process.. after do the push process again \"git add .\" \"git commit\" and \"git push origin master\" a bunch of message will log and the final logs would be like this image below.. now you can access your Web App URL in my case is <a href=\"http://deployed-nodejs-app.herokuapp.com/\" title=\"my how to deploy node.js to Heroku post\" target=\"_blank\">deployed-nodejs-app</a>.\n\n<div class=\"fluidImg\">\n<img src=\"/assets/images/post-images/pushed.png\" alt=\"Web app deployed\">\n</div>\n\n<br>\n\nAnd this is how we deploy Node.js to Heroku.. fast and easy.\n\nCheers!\n\n\n","html":"<p>[post under improvements]</p>\n\n<p>As a developer I have been always curious to learn and try new technologies that can improve my skill and help me build better Web Applications..So today I&#39;m going to try help you set up a simple Node.js server on Heroku Cloud using my small open source project aims deploy even faster Node.js applications.</p>\n\n<h2>Why Heroku</h2>\n\n<p>&lt;a href=&quot;http://www.heroku.com&quot; target=&quot;&quot;_blank title=&quot;&quot;&gt;Heroku&lt;/a&gt; is a cloud application platform where you can build and deploy web apps\nwith the technologies you know as Java, Ruby, Closure, Node.js, Python and Scala..Heroku uses integration with Git so you can deploy your Application\nsimply pushing to master. Oh and It&#39;s FREE!</p>\n\n<p>I have four web apps hosted on heroku but two are for public access this blog/portfolio running on Ruby and Lollagram running on Node.js.</p>\n\n<h2>Why Node.js</h2>\n\n<p>It&#39;s Javascript...on the Server!</p>\n\n<p>&lt;iframe src=&quot;http://giphy.com/embed/13k1e8OMVO2a3K&quot; frameBorder=&quot;0&quot; allowFullScreen=&quot;allowFullScreen&quot;&gt;&lt;/iframe&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>No, But seriously. Javascript is well known by us Front End Developers/Engineers and even designers. &lt;br&gt;\nThat&#39;s already one good reason but the main &quot;real&quot; reasons are Node.js is all about making event-driven (Ajax can be done on the server side), low-latency, non-blocking I/O...perfect for real time. &lt;br&gt;\nNode.js makes a much smaller footprint on your web server It allocates web server resources on an as-needed basis, not pre-allocating a large chunk of resources for each user. For example, Apache might assign 8MB to a user, while Node assigns 8KB.</p>\n\n<h2>Heroku set up</h2>\n\n<p>I&#39;m going to assume you have account on Heroku (it&#39;s free) and the &lt;a href=&quot;https://toolbelt.heroku.com/&quot; title=&quot;toolbelt kit&quot; target=&quot;<em>blank&quot;&gt;toolbelt kit&lt;/a&gt; installed and you also have &lt;a href=&quot;http://Nodejs.org/&quot; title=&quot;Node.js&quot; target=&quot;</em>blank&quot;&gt;Node.js&lt;/a&gt; installed.</p>\n\n<h2>Let&#39;s get it start</h2>\n\n<p>First of all (after everything installed) create a new folder (whatever-name-you-want) then open your terminal go to your folder and type..</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit init\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>then</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit add .\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>then</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit commit -m &quot;first commit&quot;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now you have git initialized..time to create a Heroku app. &lt;br&gt;\nFirst thing you need to login to Heroku (remember that we are doing everything from the command line on terminal)</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nheroku login\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nheroku create name-of-your-app\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Done! You just need to push your code.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit push\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>You can access your Web App url on www.your-app-name.heroku.com</p>\n\n<p>Oh wait! What is this?</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/heroku-404.png&quot; alt=&quot;Heroku 404&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>To make your Web App run on Heroku you need to run your Web App in one of those languages I said right on the beginning of this post.</p>\n\n<p>Today we are going to run and deploy a simple Node.js/Express.js Application..since I have been using Heroku and Node.js for all my personal/aside projects I created a Express.js boilerplate to run and deploy fast and easy with &lt;a href=&quot;/blog/introduction-to-task-runner-gruntjs/&quot; target=&quot;_blank&quot; title=&quot;introduction to Grunt.js&quot;&gt;Grunt.js&lt;/a&gt; included so you can watch for changes on your files to minify CSS and uglify JS. I also included static assets and NO Jade (jade is native on Express.js) so you can code your normal HTML instead of Jade.</p>\n\n<p>Go to my Github repository &lt;a href=&quot;https://github.com/weblancaster/expressjs-static-boilerplate&quot; target=&quot;_blank&quot; title=&quot;Express.js static boilerplate&quot;&gt;Express.js static boilerplate&lt;/a&gt; and download the zip file then extract and copy everything has inside of &quot;expressjs-static-boilerplate&quot; folder to your Web App folder.</p>\n\n<h2>Running Node.js</h2>\n\n<p>After download my boilerplate let&#39;s install the dependencies and run our Node.js server</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nsudo npm install -g\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Enter your password.\nYou should see something like the image below.. notice that not every log is showed on the image..</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/success-image.png&quot; alt=&quot;success image&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>All Node dependencies are installed and now you can start run your server.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nnode server.js\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Or to not need to quit the server &quot;control + c&quot; every time you do any change I also added a monitor to the boilerplate so every time you do your changes and save the monitor you automatically re-run the server.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nnodemon server.js\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h2>Running Grunt.js</h2>\n\n<p>After install all the Node.js dependencies you can start run your tasks to minify CSS and uglify JS. &lt;br&gt;\nOpen a new tab on your terminal and run the command.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngrunt build\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>This is the message you should get.</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/grunt-build.png&quot; alt=&quot;grunt build&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>But still not quite good enough because we would need to build every time we did any change.\nSo let&#39;s start to watch for changes on the files.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngrunt watch\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now every time you do any change and save the file grunt you build automatically.</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/grunt-watch.png&quot; alt=&quot;grunt watch&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>Ok. That&#39;s pretty cool right?!.</p>\n\n<h2>Deploying and Running on Heroku</h2>\n\n<p>Now let&#39;s push to Heroku and see if it works.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit add .\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit commit -m &quot;added express boilerplate&quot;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\ngit push origin master\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>and this is what happened..</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/no-support.png&quot; alt=&quot;no support&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>If you read the message you will see &quot;Push rejected, no Cedar-supported app detected&quot; so let&#39;s add support to make this baby work..\nEvery Web App on Heroku needs a file to tell Heroku what are we deploying..</p>\n\n<p>In this case we need a &quot;Procfile&quot;. So create a new file named &quot;Procfile&quot; and type &quot;web: node server.js&quot; save inside your app folder. &lt;br&gt;</p>\n\n<p>Then you need to activate your server and tell Heroku to run 1 &quot;Cedar&quot; (one cedar is free hosting).</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;\nheroku ps:scale web=1\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/cedar.png&quot; alt=&quot;no support&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>Repeat the push process.. after do the push process again &quot;git add .&quot; &quot;git commit&quot; and &quot;git push origin master&quot; a bunch of message will log and the final logs would be like this image below.. now you can access your Web App URL in my case is &lt;a href=&quot;http://deployed-nodejs-app.herokuapp.com/&quot; title=&quot;my how to deploy node.js to Heroku post&quot; target=&quot;_blank&quot;&gt;deployed-nodejs-app&lt;/a&gt;.</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n&lt;img src=&quot;/assets/images/post-images/pushed.png&quot; alt=&quot;Web app deployed&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>And this is how we deploy Node.js to Heroku.. fast and easy.</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Deploying Node.js server on Heroku Cloud","meta_description":"As a developer I have been always curious to learn and try new technologies that can improve my skill and help me build better Web Applications..So today I'm going to try help you set up a simple Node.js server on Heroku Cloud using my small open source project aims deploy even faster Node.js applications.","author_id":1},{"id":16,"uuid":"8858b39a-142e-40da-8af5-e89b113b67b8","title":"My Micro-Library called Jet.js","slug":"javascript-script-dependency-loader-on-demand","markdown":"\n\nMy love for Javascript just get bigger and also my knowledge but that's not what I'm going to blog about today.. at this time I'm going to post about the Micro-Library I created Jet.js\n\n## Jet.js\n\nOne of the senior developers at my former company was having some performance issues on a particular Web Application..\nAfter see the code at my perspective one of the problems were all the plugins (was more than 15) being download on the entire Application.\n\nI decided create a very lightweight library (called modular-script-loader) to solve that problem downloading scripts asynchronously (non-block) and on demand (not for all the pages).\n\nSo last night I decided re-write entirely using better Design pattern and cleaner code I also gave a better name \"Jet.js\".\n\n### Code\n\nCheck out on Github <a href=\"http://www.github.com/weblancaster/jet\" target=\"\"_blank title=\"Jet js\">Jet.js</a>\n\nMy goal here is to make the Web Application faster therefore <strong> download scripts asynchronously (non-block), better organized script dependency and very very lightweight</strong>.\n\nBelow is the code to make the \"magic\" happen..just a few lines of code.\n\n<pre><code data-language=\"javascript\">\n/*!\n * Jet.js (Micro-library)\n * Version: 0.3\n * http://git.io/LwFXlg\n * Released under the MIT license\n *\n * Author's name: Michael Lancaster\n * website: www.bymichaellancaster.com\n * Twitter: @weblancaster\n * Date: 24-09-2013\n */\n;(function(window, undefined) {\n\n    window.Jet = window.Jet || {};\n\n    Jet.App = (function() {\n        // PRIVATE\n\n        /**\n         * Responsible to inject widgets/scripts\n         * on the page\n         * @method inject\n         */\n         function inject(url, callback) {\n            var script = document.createElement(\"script\");\n            script.type = \"text/javascript\";\n\n            if (script.readyState){  //IE\n                script.onreadystatechange = function(){\n                    if ( script.readyState == \"loaded\" || script.readyState == \"complete\" ) {\n                        script.onreadystatechange = null;\n                        if ( callback !== undefined ) {\n                            callback();\n                        }\n                    }\n                };\n            } else {  //Others\n                script.onload = function(){\n                    if ( callback !== undefined ) {\n                        callback();\n                    }\n                };\n            }\n\n            script.src = url;\n            document.getElementsByTagName('body')[0].appendChild(script);\n        }\n\n        // PUBLIC\n        return {\n            /**\n             * Responsible to store all widgets\n             * as an array\n             * @property WIDGETS_COLLECTION\n             */\n            WIDGETS_COLLECTION: null,\n\n            /**\n             * Responsible to get widgets\n             * and transform in array\n             * and assign to the property\n             * @method widgets\n             */\n            widgets: function() {\n                var widgets = document.body.getAttribute('data-ui-widget'),\n                    widgetsArr = widgets.split(' ');\n\n                this.WIDGETS_COLLECTION = widgetsArr;\n            },\n\n            /**\n             * Responsible for receive arguments and initialize widget\n             * @method init\n             */\n            init: function(name, url, callback) {\n                this.widgets();\n\n                if ( arguments.length < 2 ) {\n                    return false\n                }\n\n                var widget = name,\n                    widgetCollection = this.WIDGETS_COLLECTION,\n                    widgetCollectionLength = widgetCollection.length,\n                    i = 0;\n\n                for ( ; i < widgetCollectionLength; i++ ) {\n                    if ( widgetCollection[i].indexOf(widget) === 0 ) {\n                        inject(url, callback);\n                    }\n                }\n            }\n        }\n\n    });\n\n})(window);\n</code></pre>\n\n### how to use\n\nDefine what are the widgets you want to use on that page (on body element).\n\n<pre><code data-language=\"html\">\n< body data-ui-widget=\"widget-jquery widget-cycle\" >\n</code></pre>\n\ninclude Jet.js on your page\n\n<pre><code data-language=\"html\">\n<script src=\"js/jet.min.js\"></script>\n</code></pre>\n\nI would suggest you create a JS file which has all your widgets been called.\n\n<pre><code data-language=\"javascript\">\n// Cycle\nvar dependency1 = new Jet.App;\n    dependency1.init('widget-cycle', 'http://malsup.github.io/jquery.cycle.all.js', function() {\n        console.log('cycle loaded');\n        $('#outdoor-context-content').cycle({\n            fx: 'fade'\n        });\n    });\n</code></pre>\n\nDone!\n\n### Example of use\n\n- Relatively small to medium Web Applications\n- Wordpress, Drupal, CMS's Web Applications in general\n\n### (Intended) browser support\n\n- Google Chrome\n- Mozilla Firefox 3+\n- Apple Safari 4+\n- Opera 10+\n- Internet Explorer 7+\n\nIf you found any bug or want to contribute or want to give me any opinion feel free to do that.","html":"<p>My love for Javascript just get bigger and also my knowledge but that&#39;s not what I&#39;m going to blog about today.. at this time I&#39;m going to post about the Micro-Library I created Jet.js</p>\n\n<h2>Jet.js</h2>\n\n<p>One of the senior developers at my former company was having some performance issues on a particular Web Application..\nAfter see the code at my perspective one of the problems were all the plugins (was more than 15) being download on the entire Application.</p>\n\n<p>I decided create a very lightweight library (called modular-script-loader) to solve that problem downloading scripts asynchronously (non-block) and on demand (not for all the pages).</p>\n\n<p>So last night I decided re-write entirely using better Design pattern and cleaner code I also gave a better name &quot;Jet.js&quot;.</p>\n\n<h3>Code</h3>\n\n<p>Check out on Github &lt;a href=&quot;http://www.github.com/weblancaster/jet&quot; target=&quot;&quot;_blank title=&quot;Jet js&quot;&gt;Jet.js&lt;/a&gt;</p>\n\n<p>My goal here is to make the Web Application faster therefore &lt;strong&gt; download scripts asynchronously (non-block), better organized script dependency and very very lightweight&lt;/strong&gt;.</p>\n\n<p>Below is the code to make the &quot;magic&quot; happen..just a few lines of code.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\n/<em>!\n </em> Jet.js (Micro-library)\n <em> Version: 0.3\n </em> http://git.io/LwFXlg\n <em> Released under the MIT license\n </em>\n <em> Author&#39;s name: Michael Lancaster\n </em> website: www.bymichaellancaster.com\n <em> Twitter: @weblancaster\n </em> Date: 24-09-2013\n */\n;(function(window, undefined) {</p>\n\n<pre><code>window.Jet = window.Jet || {};\n\nJet.App = (function() {\n    // PRIVATE\n\n    /**\n     * Responsible to inject widgets/scripts\n     * on the page\n     * @method inject\n     */\n     function inject(url, callback) {\n        var script = document.createElement(&quot;script&quot;);\n        script.type = &quot;text/javascript&quot;;\n\n        if (script.readyState){  //IE\n            script.onreadystatechange = function(){\n                if ( script.readyState == &quot;loaded&quot; || script.readyState == &quot;complete&quot; ) {\n                    script.onreadystatechange = null;\n                    if ( callback !== undefined ) {\n                        callback();\n                    }\n                }\n            };\n        } else {  //Others\n            script.onload = function(){\n                if ( callback !== undefined ) {\n                    callback();\n                }\n            };\n        }\n\n        script.src = url;\n        document.getElementsByTagName(&#39;body&#39;)[0].appendChild(script);\n    }\n\n    // PUBLIC\n    return {\n        /**\n         * Responsible to store all widgets\n         * as an array\n         * @property WIDGETS_COLLECTION\n         */\n        WIDGETS_COLLECTION: null,\n\n        /**\n         * Responsible to get widgets\n         * and transform in array\n         * and assign to the property\n         * @method widgets\n         */\n        widgets: function() {\n            var widgets = document.body.getAttribute(&#39;data-ui-widget&#39;),\n                widgetsArr = widgets.split(&#39; &#39;);\n\n            this.WIDGETS_COLLECTION = widgetsArr;\n        },\n\n        /**\n         * Responsible for receive arguments and initialize widget\n         * @method init\n         */\n        init: function(name, url, callback) {\n            this.widgets();\n\n            if ( arguments.length &lt; 2 ) {\n                return false\n            }\n\n            var widget = name,\n                widgetCollection = this.WIDGETS_COLLECTION,\n                widgetCollectionLength = widgetCollection.length,\n                i = 0;\n\n            for ( ; i &lt; widgetCollectionLength; i++ ) {\n                if ( widgetCollection[i].indexOf(widget) === 0 ) {\n                    inject(url, callback);\n                }\n            }\n        }\n    }\n\n});</code></pre>\n\n<p>})(window);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>how to use</h3>\n\n<p>Define what are the widgets you want to use on that page (on body element).</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;\n&lt; body data-ui-widget=&quot;widget-jquery widget-cycle&quot; &gt;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>include Jet.js on your page</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;\n&lt;script src=&quot;js/jet.min.js&quot;&gt;&lt;/script&gt;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>I would suggest you create a JS file which has all your widgets been called.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\n// Cycle\nvar dependency1 = new Jet.App;\n    dependency1.init(&#39;widget-cycle&#39;, &#39;http://malsup.github.io/jquery.cycle.all.js&#39;, function() {\n        console.log(&#39;cycle loaded&#39;);\n        $(&#39;#outdoor-context-content&#39;).cycle({\n            fx: &#39;fade&#39;\n        });\n    });\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Done!</p>\n\n<h3>Example of use</h3>\n\n<ul><li>Relatively small to medium Web Applications</li><li>Wordpress, Drupal, CMS&#39;s Web Applications in general</li></ul>\n\n<h3>(Intended) browser support</h3>\n\n<ul><li>Google Chrome</li><li>Mozilla Firefox 3+</li><li>Apple Safari 4+</li><li>Opera 10+</li><li>Internet Explorer 7+</li></ul>\n\n<p>If you found any bug or want to contribute or want to give me any opinion feel free to do that.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"My Micro-Library called Jet.js","meta_description":"My love for Javascript just get bigger and also my knowledge but that's not what I'm going to blog about today.. at this time I'm going to post about the Micro-Library I created Jet.js","author_id":1},{"id":17,"uuid":"02584ef3-3d21-4763-b6f5-7fd8f12cefea","title":"We are influenced by people","slug":"we-are-influenced-by-people","markdown":"\n\nIt's about questioning what surround us to try understand things. The pragmatic programmer is a book that I'm looking forward to read after finish Javascript Web Applications..but for now this is what I would like to share related to the topic of this book.\n\n<strong>\"You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allows you to choose good solutions in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstances and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well.\"</strong>\n\n<div class=\"fluidMedia\">\n    <iframe src=\"//www.youtube.com/embed/vPj4zxhy8wI\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>","html":"<p>It&#39;s about questioning what surround us to try understand things. The pragmatic programmer is a book that I&#39;m looking forward to read after finish Javascript Web Applications..but for now this is what I would like to share related to the topic of this book.</p>\n\n<p>&lt;strong&gt;&quot;You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allows you to choose good solutions in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstances and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well.&quot;&lt;/strong&gt;</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n    &lt;iframe src=&quot;//www.youtube.com/embed/vPj4zxhy8wI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"We are influenced by people","meta_description":"It's about questioning what surround us to try understand things. The pragmatic programmer is a book that I'm looking forward to read after finish Javascript Web Applications..but for now this is what I would like to share related to the topic of this book.","author_id":1},{"id":18,"uuid":"ac8a451b-2733-4956-88e8-b75db260048b","title":"CSS Bad and Good practices","slug":"css-bad-and-good-practices-good-tips","markdown":"\n\nToday I'm sharing my presentation/slide about CSS bad and good practices and some really good tips. Hopefully this contribution to the community will help developers and designers make better products..FYI this can hurt your feeling.\n\n<script async class=\"speakerdeck-embed\" data-id=\"ac560a10247001311e28167841e016d4\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<br>\n\nFeedback is always welcome.","html":"<p>Today I&#39;m sharing my presentation/slide about CSS bad and good practices and some really good tips. Hopefully this contribution to the community will help developers and designers make better products..FYI this can hurt your feeling.</p>\n\n<p>&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;ac560a10247001311e28167841e016d4&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>Feedback is always welcome.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"CSS Bad and Good practices","meta_description":"Today I'm sharing my presentation/slide about CSS bad and good practices and some really good tips. Hopefully this contribution to the community will help developers and designers make better products..FYI this can hurt your feeling.","author_id":1},{"id":19,"uuid":"91e95d98-738d-496e-8e4c-a3998d176c90","title":"Experience Chicago through Instagram","slug":"chicago-through-instagram-chicagogram-us","markdown":"\n\nSince the amount (just a few) of people sharing pictures on Instagram with Lollapalooza hashtag isn't the same as when the event was happening I decided to create <a href=\"http://chicagogram.us\" target=\"\"_blank title=\"Chicagogram.us - Experience Chicago through Instagram\">Chicagogram.us</a> with the hashtag #chicago #chicagogram therefore lots of people sharing different pictures of Chicago and selfies of course.\n\nI'm using the same code (I did some code refactor) and changed/removed some stuff from the layout as a developer standpoint.\n\nEnjoy!","html":"<p>Since the amount (just a few) of people sharing pictures on Instagram with Lollapalooza hashtag isn&#39;t the same as when the event was happening I decided to create &lt;a href=&quot;http://chicagogram.us&quot; target=&quot;&quot;_blank title=&quot;Chicagogram.us - Experience Chicago through Instagram&quot;&gt;Chicagogram.us&lt;/a&gt; with the hashtag #chicago #chicagogram therefore lots of people sharing different pictures of Chicago and selfies of course.</p>\n\n<p>I&#39;m using the same code (I did some code refactor) and changed/removed some stuff from the layout as a developer standpoint.</p>\n\n<p>Enjoy!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Experience Chicago through Instagram","meta_description":"Since the amount (just a few) of people sharing pictures on Instagram with Lollapalooza hashtag isn't the same as when the event was happening I decided to create Chicagogram.us with the hashtag","author_id":1},{"id":20,"uuid":"76d47090-1cc7-47b9-b8ad-2db05658f750","title":"PS4 Alerts using BBY API","slug":"playstation4-alert-using-best-buy-api-nodejs-socketio-nedb","markdown":"\n\nLong story short.. I didn't want to check Best Buy every day to see if PS4 is available..\nSo I built this Web Application <a href=\"http://ps4alerts.herokuapp.com/\" target=\"_blank\" title=\"Be notified when PlayStation 4 is available at Bes Buy\">PS4 Alerts!</a> to check every one (1) minute Best Buy Data and if find any PS4 available in store or online will send me an email notification with a direct link to the product.\n\nI also added one feature as subscription so more people can be notified as well.\n\n### Specs\n\n- Node.js/Express.js (Backend/Server)\n- Socket.io (Real time communication with the client)\n- Handlebars.js (as backend template view)\n- NeDB (Database)\n- <a href=\"https://bbyopen.com/\" target=\"_blank\" title=\"Best Buy open API\">BBYOpen API</a>\n\nBe advised I built it in two nights..Enjoy!","html":"<p>Long story short.. I didn&#39;t want to check Best Buy every day to see if PS4 is available..\nSo I built this Web Application &lt;a href=&quot;http://ps4alerts.herokuapp.com/&quot; target=&quot;_blank&quot; title=&quot;Be notified when PlayStation 4 is available at Bes Buy&quot;&gt;PS4 Alerts!&lt;/a&gt; to check every one (1) minute Best Buy Data and if find any PS4 available in store or online will send me an email notification with a direct link to the product.</p>\n\n<p>I also added one feature as subscription so more people can be notified as well.</p>\n\n<h3>Specs</h3>\n\n<ul><li>Node.js/Express.js (Backend/Server)</li><li>Socket.io (Real time communication with the client)</li><li>Handlebars.js (as backend template view)</li><li>NeDB (Database)</li><li>&lt;a href=&quot;https://bbyopen.com/&quot; target=&quot;_blank&quot; title=&quot;Best Buy open API&quot;&gt;BBYOpen API&lt;/a&gt;</li></ul>\n\n<p>Be advised I built it in two nights..Enjoy!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"PS4 Alerts using BBY API","meta_description":"Long story short.. I didn't want to check Best Buy every day to see if PS4 is available..So I built this Web Application to check every one (1) minute Best Buy Data and if find any PS4 available in store or online will send me an email notification with a direct link to the product.","author_id":1},{"id":21,"uuid":"425ba32d-742d-469d-b5d6-8aa5336ce527","title":"Why I like GulpJS more than GruntJS","slug":"why-i-like-gulpjs-more-than-gruntjs","markdown":"\n\n2013 was the year of GruntJS (I have a post about it) but beginning of 2014 a new cool kid on the block show up\n\nThis post is just an FYI instead of a tutorial and for those that don't know GruntJS please take a look here <a href=\"http://www.bymichaellancaster.com/blog/introduction-to-task-runner-gruntjs/\" target=\"_blank\" title=\"GruntJS\">GruntJS post</a>.\n\nWhen I saw GulpJS at first I said just another task runner.. but then I read the code to see how it works and I got very excited. Why?\nFirst because uses Streams (Streams is an very important part of NodeJS) which makes faster than GruntJS.. second because if you have been writing NodeJs applications you can notice that GruntJS isn't very let's say \"pretty\" (but works great) but on the other hand GulpJS is like write an NodeJS application making very very easy to \"install\" and use. I loved.\n\nHere's how a GruntJS file looks like <a href=\"https://github.com/weblancaster/blog-examples/blob/master/GruntJS-app\" target=\"_blank\" title=\"GruntJS\">GruntJS code example</a> and here how <a href=\"https://github.com/weblancaster/blog-examples/tree/master/gulpjs-example\" target=\"_blank\" title=\"GulpJS\">GulpJS code example </a> looks like\n\nCheck out the <a href=\"https://gulpjs.com\" target=\"_blank\" title=\"GulpJS website\"> GulpJS website </a> for more information.\n\n<pre><code data-language=\"javascript\">\n// Require modules\nvar gulp = require('gulp')\n    , uglify = require('gulp-uglify')\n    , minifyHTML = require('gulp-minify-html')\n    , sass = require('gulp-sass');\n\n// Here's the tasks\ngulp.task('build', function(){\n    var dist = 'dist/'\n        , dirPublic = 'public/'\n        , distStylesheets = dist + dirPublic + 'stylesheets/'\n        , distJavascripts = dist + dirPublic + 'javascripts/';\n\n    gulp.src('public/stylesheets/scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest(distStylesheets));\n\n    gulp.src('*.html')\n        .pipe(minifyHTML())\n        .pipe(gulp.dest(dist))\n\n    gulp.src('public/javascripts/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest(distJavascripts))\n});\n\n// Gulp watch for file changes\ngulp.task('default', function() {\n    gulp.watch([\n        'public/stylesheets/scss/**',\n        'public/javascripts/*.js',\n        '*.html',\n        '!dist/**'\n    ], function(event) {\n        gulp.run('build');\n    });\n});\n</code></pre>\n\nCheers!","html":"<p>2013 was the year of GruntJS (I have a post about it) but beginning of 2014 a new cool kid on the block show up</p>\n\n<p>This post is just an FYI instead of a tutorial and for those that don&#39;t know GruntJS please take a look here &lt;a href=&quot;http://www.bymichaellancaster.com/blog/introduction-to-task-runner-gruntjs/&quot; target=&quot;_blank&quot; title=&quot;GruntJS&quot;&gt;GruntJS post&lt;/a&gt;.</p>\n\n<p>When I saw GulpJS at first I said just another task runner.. but then I read the code to see how it works and I got very excited. Why?\nFirst because uses Streams (Streams is an very important part of NodeJS) which makes faster than GruntJS.. second because if you have been writing NodeJs applications you can notice that GruntJS isn&#39;t very let&#39;s say &quot;pretty&quot; (but works great) but on the other hand GulpJS is like write an NodeJS application making very very easy to &quot;install&quot; and use. I loved.</p>\n\n<p>Here&#39;s how a GruntJS file looks like &lt;a href=&quot;https://github.com/weblancaster/blog-examples/blob/master/GruntJS-app&quot; target=&quot;<em>blank&quot; title=&quot;GruntJS&quot;&gt;GruntJS code example&lt;/a&gt; and here how &lt;a href=&quot;https://github.com/weblancaster/blog-examples/tree/master/gulpjs-example&quot; target=&quot;</em>blank&quot; title=&quot;GulpJS&quot;&gt;GulpJS code example &lt;/a&gt; looks like</p>\n\n<p>Check out the &lt;a href=&quot;https://gulpjs.com&quot; target=&quot;_blank&quot; title=&quot;GulpJS website&quot;&gt; GulpJS website &lt;/a&gt; for more information.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\n// Require modules\nvar gulp = require(&#39;gulp&#39;)\n    , uglify = require(&#39;gulp-uglify&#39;)\n    , minifyHTML = require(&#39;gulp-minify-html&#39;)\n    , sass = require(&#39;gulp-sass&#39;);</p>\n\n<p>// Here&#39;s the tasks\ngulp.task(&#39;build&#39;, function(){\n    var dist = &#39;dist/&#39;\n        , dirPublic = &#39;public/&#39;\n        , distStylesheets = dist + dirPublic + &#39;stylesheets/&#39;\n        , distJavascripts = dist + dirPublic + &#39;javascripts/&#39;;</p>\n\n<pre><code>gulp.src(&#39;public/stylesheets/scss/*.scss&#39;)\n    .pipe(sass())\n    .pipe(gulp.dest(distStylesheets));\n\ngulp.src(&#39;*.html&#39;)\n    .pipe(minifyHTML())\n    .pipe(gulp.dest(dist))\n\ngulp.src(&#39;public/javascripts/*.js&#39;)\n    .pipe(uglify())\n    .pipe(gulp.dest(distJavascripts))</code></pre>\n\n<p>});</p>\n\n<p>// Gulp watch for file changes\ngulp.task(&#39;default&#39;, function() {\n    gulp.watch([\n        &#39;public/stylesheets/scss/<strong>&#39;,\n        &#39;public/javascripts/<em>.js&#39;,\n        &#39;</em>.html&#39;,\n        &#39;!dist/</strong>&#39;\n    ], function(event) {\n        gulp.run(&#39;build&#39;);\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Why I like GulpJS more than GruntJS","meta_description":"2013 was the year of GruntJS (I have a post about it) but beginning of 2014 a new cool kid on the block show up..","author_id":1},{"id":22,"uuid":"434b2671-0fe5-4f66-93bf-addf243d01df","title":"DOM insert HTML method you might not know","slug":"DOM-insert-html-method-you-might-not-know-about","markdown":"\n\nEverybody knows/use \"innerHTML\" to insert HTML but I was looking at the MDN website jumping between Web\nAPI's when I saw this DOM method called insertAdjacentHTML..it's \"innerHTML\" brothers but cooler and\n<strong>faster</strong>.\n<br>\nBesides the performance another difference is that \"innerHTML\" will overwrite the content inside the element when\n\"insertAdjacentHTML\" will add to the specified position.\n\nHere you can compare the performance between \"innerHTML\" and \"insertAdjacentHTML\" <a href=\"http://jsperf\n.com/insertadjacenthtml-perf/3\" target=\"_blank\" title=\"innerHTML vs insertAdjacentHTMl\">here</a> and gets better\nits <strong>supported in all browsers</strong>.\n\nIt's been out there for a while now even John Resig has an <a href=\"http://ejohn.org/blog/dom-insertadjacenthtml/\"\ntarget=\"_blank\" title=\"insertAdjacentHTML post John Resig\">post</a> about it back in 2008.\n\nIt's very simple to use you are going to need to pass one of the positions (below) and then pass the content.\n\n#### Position\n- \"beforebegin\" (insert before the element)\n- \"afterend\" (insert after the element)\n- \"afterbegin\" (insert inside element after begin)\n- \"beforeend\" (insert inside element before end)\n\n<pre><code data-language=\"javascript\">\nelement.insertAdjacentHTML(\"position\", \"content\");\n</code></pre>\n\nLet's say we have a method that do the job for us when we pass the \"position\" and \"content\".\n\n<pre><code data-language=\"javascript\">\n(function(window) {\n\twindow.App = window.App || {};\n\n\twindow.App = {\n\t\tinsertElement: function(position, content) {\n\t\t\tvar elDiv = document.getElementById('wrapper');\n\t\t\t\telDiv.insertAdjacentHTML(position, content)\n\t\t}\n\t}\n})(window);\n\nvar content1 = '<p id=\"ct1\">this is a paragrag a \"beforebegin\" element</p>';\nvar content2 = '<p id=\"ct2\">this is a paragrag a \"afterbegin\" element</p>';\nvar content3 = '<p id=\"ct3\">this is a paragrag a \"beforeend\" element</p>';\nvar content4 = '<p id=\"ct4\">this is a paragrag a \"afterend\" element</p>';\n\nApp.insertElement('beforebegin', content1);\nApp.insertElement('afterbegin', content2);\nApp.insertElement('beforeend', content3);\nApp.insertElement('afterend', content4);\n</code></pre>\n\nHere's a example how it works <a href=\"http://jsfiddle.net/ftZyn/2/\" target=\"_blank\" title=\"how insertAdjacentHTMl works\">link</a>.\n\nEnjoy the tip.","html":"<p>Everybody knows/use &quot;innerHTML&quot; to insert HTML but I was looking at the MDN website jumping between Web\nAPI&#39;s when I saw this DOM method called insertAdjacentHTML..it&#39;s &quot;innerHTML&quot; brothers but cooler and\n&lt;strong&gt;faster&lt;/strong&gt;.\n&lt;br&gt;\nBesides the performance another difference is that &quot;innerHTML&quot; will overwrite the content inside the element when\n&quot;insertAdjacentHTML&quot; will add to the specified position.</p>\n\n<p>Here you can compare the performance between &quot;innerHTML&quot; and &quot;insertAdjacentHTML&quot; &lt;a href=&quot;http://jsperf\n.com/insertadjacenthtml-perf/3&quot; target=&quot;_blank&quot; title=&quot;innerHTML vs insertAdjacentHTMl&quot;&gt;here&lt;/a&gt; and gets better\nits &lt;strong&gt;supported in all browsers&lt;/strong&gt;.</p>\n\n<p>It&#39;s been out there for a while now even John Resig has an &lt;a href=&quot;http://ejohn.org/blog/dom-insertadjacenthtml/&quot;\ntarget=&quot;_blank&quot; title=&quot;insertAdjacentHTML post John Resig&quot;&gt;post&lt;/a&gt; about it back in 2008.</p>\n\n<p>It&#39;s very simple to use you are going to need to pass one of the positions (below) and then pass the content.</p>\n\n<h4>Position</h4>\n\n<ul><li>&quot;beforebegin&quot; (insert before the element)</li><li>&quot;afterend&quot; (insert after the element)</li><li>&quot;afterbegin&quot; (insert inside element after begin)</li><li>&quot;beforeend&quot; (insert inside element before end)</li></ul>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nelement.insertAdjacentHTML(&quot;position&quot;, &quot;content&quot;);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Let&#39;s say we have a method that do the job for us when we pass the &quot;position&quot; and &quot;content&quot;.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\n(function(window) {\n\twindow.App = window.App || {};</p>\n\n<pre><code>window.App = {\n\tinsertElement: function(position, content) {\n\t\tvar elDiv = document.getElementById(&#39;wrapper&#39;);\n\t\t\telDiv.insertAdjacentHTML(position, content)\n\t}\n}</code></pre>\n\n<p>})(window);</p>\n\n<p>var content1 = &#39;&lt;p id=&quot;ct1&quot;&gt;this is a paragrag a &quot;beforebegin&quot; element&lt;/p&gt;&#39;;\nvar content2 = &#39;&lt;p id=&quot;ct2&quot;&gt;this is a paragrag a &quot;afterbegin&quot; element&lt;/p&gt;&#39;;\nvar content3 = &#39;&lt;p id=&quot;ct3&quot;&gt;this is a paragrag a &quot;beforeend&quot; element&lt;/p&gt;&#39;;\nvar content4 = &#39;&lt;p id=&quot;ct4&quot;&gt;this is a paragrag a &quot;afterend&quot; element&lt;/p&gt;&#39;;</p>\n\n<p>App.insertElement(&#39;beforebegin&#39;, content1);\nApp.insertElement(&#39;afterbegin&#39;, content2);\nApp.insertElement(&#39;beforeend&#39;, content3);\nApp.insertElement(&#39;afterend&#39;, content4);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Here&#39;s a example how it works &lt;a href=&quot;http://jsfiddle.net/ftZyn/2/&quot; target=&quot;_blank&quot; title=&quot;how insertAdjacentHTMl works&quot;&gt;link&lt;/a&gt;.</p>\n\n<p>Enjoy the tip.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"DOM insert HTML method you might not know","meta_description":"Everybody knows/use \"innerHTML\" to insert HTML but I was looking at the MDN website jumping between Web API's I did not know and one of them got my attention it's called insertAdjacentHTML..","author_id":1},{"id":23,"uuid":"5678cab6-eba9-4dae-bbc9-f3f868d2266d","title":"Web and Automotive.","slug":"web-and-automotive-w3c-group","markdown":"\n\n<strong>Updated version: 04/07/2014</strong>\n\n## And there's more..\n\nW3C business group published a very nice material about the Vehicle Information API and how could/can work.\n<br>\nPretty exciting! To know more <a href=\"https://rawgit.com/w3c/automotive-bg/master/snapshots/vehicle_spec_snapshot20140425.html\" target=\"_blank\" title=\"W3C business group - Vehicle Information API\">click here</a>.\n\n<strong>Updated version: 03/03/2014</strong>\n\n## As imagined..\n\nLooks like isn't just me excited to see applications on cars.. Apple announced <a href=\"https://www.apple.com/ios/carplay/\" target=\"_blank\" title=\"CarPlay\">CarPlay</a>.\n<br>\nYou can read more on <a href=\"http://techcrunch.com/2014/03/03/apples-new-carplay-system-will-turn-tens-of-millions-of-cars-into-iphone-accessories/\" target=\"_blank\" title=\"Apple’s New CarPlay System Will Turn Tens Of Millions Of Cars Into iPhone Accessories\">TechCrunch</a>.\n\n<strong>Original version: 02/26/2014</strong>\n\n## it's all about mobility\n\nI have been very curious about developing any kind of software for cars.. but of course I would be much more interested in develop using Open Web Technologies perhaps HTML5/CSS3 and Javascript how AWESOME that would be?\n\nAnyway. while trying to find any sort of material on something I can feed my mind about it I found some very interesting stuff and gathered all in one post.\n\nSo for those that don't know there's actually a W3C group to bring and to accelerate the adoption of Web technologies in the automotive industry.\nThe group will focus on defining a Vehicle Data API that will create new opportunities for automotive services via the Web.\n\n<strong>Some of the advantages of Web Applications</strong>\n\nWeb technologies are well known and \"well supported\" by devices therefore would make the adoption \"easier\".\nand since Web technologies are based on open standards, developers are not held hostage by particular vendors.\n\n<strong>Challenges to adopt Web Technology in the Car</strong>\n\nDriver distraction the biggest one.. but can be solved by HMI (Human-Machine Interface) standard guidelines on how the driver interact with the UI while certain behavior e.g car in movement.\n\nCost. Web Technologies has a very good connectivity stack Bluetooth, Wi-Fi, Cellular, TCP/IP Stack, Embedded Browser and to bring all this will increase software and hardware cost.\n\n## Tesla and Vehicle Management System\n\nTesla and the Vehicle Management System..you ask me why?! First of all I am a Elon Musk \"superfan\" not just because of his incredible desire to change the world but also because I'm curious to know how they do to have such a incredible product/car.\n\n<div class=\"fluidImg\">\n    <img src=\"/assets/images/post-images/teslaVMS.png\" alt=\"Tesla Roadsters Vehicle Management System\">\n</div>\n\nTo know more about it please read <a href=\"http://www.teslamotors.com/roadster/technology/firmware\" target=\"_blank\" title=\"Tesla Roadsters Vehicle Management System\">A Silicon Valley approach to vehicle software</a>.\n\n## Model S 17-Inch Touchscreen Display\n\nAs they say \"the world's most advanced vehicle user interface\" and I wont disagree.\n\n<div class=\"fluidMedia\">\n    <iframe src=\"//player.vimeo.com/video/61821553?title=0&amp;byline=0&amp;portrait=0\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"> </iframe>\n</div>\n\n<br>\n\nImagine the possibilities through the UX/UI using Open Web technologies.. It wont just take us to point A to point B anymore.\n\n<ul>\n    <li>\n        <small><strong>References</strong></small>\n    </li>\n    <li>\n        <small><a href=\"http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html\" target=\"_blank\" title=\"w3c and automotive\">http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html</a></small>\n    </li>\n    <li>\n        <small><a href=\"http://www.w3.org/wiki/Web_and_Automotive\" target=\"_blank\" title=\"w3c and automotive\">http://www.w3.org/wiki/Web_and_Automotive</a></small>\n    </li>\n    <li>\n        <small><a href=\"http://www.w3.org/2013/02/autobg.html.en\" target=\"_blank\" title=\"w3c and automotive\">http://www.w3.org/2013/02/autobg.html.en</a></small>\n    </li>\n</ul>\n\nCheers!\n","html":"<p>&lt;strong&gt;Updated version: 04/07/2014&lt;/strong&gt;</p>\n\n<h2>And there&#39;s more..</h2>\n\n<p>W3C business group published a very nice material about the Vehicle Information API and how could/can work.\n&lt;br&gt;\nPretty exciting! To know more &lt;a href=&quot;https://rawgit.com/w3c/automotive-bg/master/snapshots/vehicle<em>spec</em>snapshot20140425.html&quot; target=&quot;_blank&quot; title=&quot;W3C business group - Vehicle Information API&quot;&gt;click here&lt;/a&gt;.</p>\n\n<p>&lt;strong&gt;Updated version: 03/03/2014&lt;/strong&gt;</p>\n\n<h2>As imagined..</h2>\n\n<p>Looks like isn&#39;t just me excited to see applications on cars.. Apple announced &lt;a href=&quot;https://www.apple.com/ios/carplay/&quot; target=&quot;<em>blank&quot; title=&quot;CarPlay&quot;&gt;CarPlay&lt;/a&gt;.\n&lt;br&gt;\nYou can read more on &lt;a href=&quot;http://techcrunch.com/2014/03/03/apples-new-carplay-system-will-turn-tens-of-millions-of-cars-into-iphone-accessories/&quot; target=&quot;</em>blank&quot; title=&quot;Apple’s New CarPlay System Will Turn Tens Of Millions Of Cars Into iPhone Accessories&quot;&gt;TechCrunch&lt;/a&gt;.</p>\n\n<p>&lt;strong&gt;Original version: 02/26/2014&lt;/strong&gt;</p>\n\n<h2>it&#39;s all about mobility</h2>\n\n<p>I have been very curious about developing any kind of software for cars.. but of course I would be much more interested in develop using Open Web Technologies perhaps HTML5/CSS3 and Javascript how AWESOME that would be?</p>\n\n<p>Anyway. while trying to find any sort of material on something I can feed my mind about it I found some very interesting stuff and gathered all in one post.</p>\n\n<p>So for those that don&#39;t know there&#39;s actually a W3C group to bring and to accelerate the adoption of Web technologies in the automotive industry.\nThe group will focus on defining a Vehicle Data API that will create new opportunities for automotive services via the Web.</p>\n\n<p>&lt;strong&gt;Some of the advantages of Web Applications&lt;/strong&gt;</p>\n\n<p>Web technologies are well known and &quot;well supported&quot; by devices therefore would make the adoption &quot;easier&quot;.\nand since Web technologies are based on open standards, developers are not held hostage by particular vendors.</p>\n\n<p>&lt;strong&gt;Challenges to adopt Web Technology in the Car&lt;/strong&gt;</p>\n\n<p>Driver distraction the biggest one.. but can be solved by HMI (Human-Machine Interface) standard guidelines on how the driver interact with the UI while certain behavior e.g car in movement.</p>\n\n<p>Cost. Web Technologies has a very good connectivity stack Bluetooth, Wi-Fi, Cellular, TCP/IP Stack, Embedded Browser and to bring all this will increase software and hardware cost.</p>\n\n<h2>Tesla and Vehicle Management System</h2>\n\n<p>Tesla and the Vehicle Management System..you ask me why?! First of all I am a Elon Musk &quot;superfan&quot; not just because of his incredible desire to change the world but also because I&#39;m curious to know how they do to have such a incredible product/car.</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n    &lt;img src=&quot;/assets/images/post-images/teslaVMS.png&quot; alt=&quot;Tesla Roadsters Vehicle Management System&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>To know more about it please read &lt;a href=&quot;http://www.teslamotors.com/roadster/technology/firmware&quot; target=&quot;_blank&quot; title=&quot;Tesla Roadsters Vehicle Management System&quot;&gt;A Silicon Valley approach to vehicle software&lt;/a&gt;.</p>\n\n<h2>Model S 17-Inch Touchscreen Display</h2>\n\n<p>As they say &quot;the world&#39;s most advanced vehicle user interface&quot; and I wont disagree.</p>\n\n<p>&lt;div class=&quot;fluidMedia&quot;&gt;\n    &lt;iframe src=&quot;//player.vimeo.com/video/61821553?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;</p>\n\n<p>Imagine the possibilities through the UX/UI using Open Web technologies.. It wont just take us to point A to point B anymore.</p>\n\n<p>&lt;ul&gt;\n    &lt;li&gt;\n        &lt;small&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/small&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;small&gt;&lt;a href=&quot;http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html&quot; target=&quot;<em>blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html&lt;/a&gt;&lt;/small&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;small&gt;&lt;a href=&quot;http://www.w3.org/wiki/Web</em>and<em>Automotive&quot; target=&quot;</em>blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.w3.org/wiki/Web<em>and</em>Automotive&lt;/a&gt;&lt;/small&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;small&gt;&lt;a href=&quot;http://www.w3.org/2013/02/autobg.html.en&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.w3.org/2013/02/autobg.html.en&lt;/a&gt;&lt;/small&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Web and Automotive.","meta_description":"I have been very curious about developing any kind of software for cars.. but of course I would be much more interested in develop using Open Web Technologies perhaps HTML5/CSS3 and Javascript how AWESOME that would be?","author_id":1},{"id":24,"uuid":"2cd1f159-668c-4fac-a7a7-3dcbf836310b","title":"Sublime Text 3 jump to definition/method","slug":"sublime-text-3-jump-to-definition-custom-shortcut","markdown":"\n\nQuick blog post to show you how to easily add the feature goto or jump to definition on Sublime text 3 with custom shortcut\n\n<div class=\"fluidImg\">\n    <img src=\"/assets/images/post-images/st3-goto-definition.gif\" alt=\"Sublime Text 3 jump to definition/method\">\n</div>\n\n## Simple steps\n\nIn Sublime Text 3\n<pre><code data-language=\"HTML\">\nSublime Text -> Preferences -> Key Bindings - User\n</code></pre>\n\nYou can add any shortcut you want since it's not in use already so you don't overwrite the default shortcut settings.\n<br>\nIn my case I decided to use \"shift+command+m\"..as below.\n\n<pre><code data-language=\"Javascript\">\n[\n    { \"keys\": [\"shift+command+m\"], \"command\": \"goto_definition\" }\n]\n</code></pre>\n\nSave it and you are done. (ps: if did not work restart your Sublime Text 3).\n\nThanks.","html":"<p>Quick blog post to show you how to easily add the feature goto or jump to definition on Sublime text 3 with custom shortcut</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n    &lt;img src=&quot;/assets/images/post-images/st3-goto-definition.gif&quot; alt=&quot;Sublime Text 3 jump to definition/method&quot;&gt;\n&lt;/div&gt;</p>\n\n<h2>Simple steps</h2>\n\n<p>In Sublime Text 3\n&lt;pre&gt;&lt;code data-language=&quot;HTML&quot;&gt;\nSublime Text -&gt; Preferences -&gt; Key Bindings - User\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>You can add any shortcut you want since it&#39;s not in use already so you don&#39;t overwrite the default shortcut settings.\n&lt;br&gt;\nIn my case I decided to use &quot;shift+command+m&quot;..as below.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;\n[\n    { &quot;keys&quot;: [&quot;shift+command+m&quot;], &quot;command&quot;: &quot;goto_definition&quot; }\n]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Save it and you are done. (ps: if did not work restart your Sublime Text 3).</p>\n\n<p>Thanks.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Sublime Text 3 jump to definition/method","meta_description":"Quick blog post to show you how to easily add the feature goto or jump to definition on Sublime text 3 with custom shortcut.","author_id":1},{"id":25,"uuid":"8ebea1de-ed2b-48f4-8a72-47abe5b659a3","title":"Soundnode App - Soundcloud for Desktop developer release","slug":"soundnode-soundcloud-for-desktop-dev-release","markdown":"\n\nLast night I decided to release as beta version for Developer a project I have been working in the last week and make available as Open Source.\n\n## Intro..\n\nThree years ago I started work as a developer and one of the things I have been using since then is <a href=\"http://www.soundcloud.com\" target=\"_blank\" title=\"Soundcloud\">Soundcloud</a> I used to use their desktop application till the day they stopped support it. to know more about it <a href=\"http://blog.soundcloud.com/2011/01/06/desktop/\" target=\"_blank\" title=\"Soundcloud desktop support\">here</a>.\n\nTurns out that I miss my native shortcuts while listening to Soundcloud on the web browser.. Therefore I decided to solve my problem but also release as open source so contributors can suggest \"new\" features.. and here it is.\n\n## Soundnode App\n\n<a href=\"http://www.soundnodeapp.com\" target=\"_blank\" title=\"Soundnode App - Soundcloud for desktop\">Soundnode App</a> is a open source project to support Soundcloud for desktop (Windows/Mac) built with Node-Webkit, Node.js Angular.js and consuming Soundcloud API.\n\n## Why beta Developer release\n\nI built the core but I have been working on other projects in parallel and I still want to release Soundnode App as fast as I can to the public so I thought that the community would help to get this project going faster than one man.\n\nThe project is on the Github <a href=\"https://github.com/Soundnode/soundnode-app\" target=\"_blank\" title=\"Soundnode App - Soundcloud for desktop\">Soundnode App</a>.\nConstructive (or not) feedback is always welcome.\n\nCheers!\n","html":"<p>Last night I decided to release as beta version for Developer a project I have been working in the last week and make available as Open Source.</p>\n\n<h2>Intro..</h2>\n\n<p>Three years ago I started work as a developer and one of the things I have been using since then is &lt;a href=&quot;http://www.soundcloud.com&quot; target=&quot;<em>blank&quot; title=&quot;Soundcloud&quot;&gt;Soundcloud&lt;/a&gt; I used to use their desktop application till the day they stopped support it. to know more about it &lt;a href=&quot;http://blog.soundcloud.com/2011/01/06/desktop/&quot; target=&quot;</em>blank&quot; title=&quot;Soundcloud desktop support&quot;&gt;here&lt;/a&gt;.</p>\n\n<p>Turns out that I miss my native shortcuts while listening to Soundcloud on the web browser.. Therefore I decided to solve my problem but also release as open source so contributors can suggest &quot;new&quot; features.. and here it is.</p>\n\n<h2>Soundnode App</h2>\n\n<p>&lt;a href=&quot;http://www.soundnodeapp.com&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;Soundnode App&lt;/a&gt; is a open source project to support Soundcloud for desktop (Windows/Mac) built with Node-Webkit, Node.js Angular.js and consuming Soundcloud API.</p>\n\n<h2>Why beta Developer release</h2>\n\n<p>I built the core but I have been working on other projects in parallel and I still want to release Soundnode App as fast as I can to the public so I thought that the community would help to get this project going faster than one man.</p>\n\n<p>The project is on the Github &lt;a href=&quot;https://github.com/Soundnode/soundnode-app&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;Soundnode App&lt;/a&gt;.\nConstructive (or not) feedback is always welcome.</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Soundnode App - Soundcloud for Desktop developer release","meta_description":"Last night I decided to release as beta version for Developer a project I have been working in the last week and make available as Open Source.","author_id":1},{"id":26,"uuid":"8981dfc4-4250-4ec9-b949-99c38916a6b9","title":"Soundnode App - Soundcloud for desktop released","slug":"soundcloud-for-desktop-win-mac-released-soundnode-app","markdown":"\n\nSoundnode App - The Soundcloud for desktop beta released! <br>\nThat being said you download the best version to your computer <a href=\"http://www.soundnodeapp.com\" target=\"_blank\" title=\"Soundnode App - Soundcloud for desktop\">here</a> and <strong>out of the box</strong> click, authenticate your user and start to listen to songs.\n\n<div class=\"fluidImg\">\n    <img src=\"/assets/images/post-images/soundenode-0-1-0.png\" alt=\"Sublime Text 3 jump to definition/method\">\n</div>\n\n## Current Features\n\n- Search\n- Keyboard shortcuts (not native for this release)\nPlay/Pause `command+return` or `space`, Prev `command+left`, Next `command+right`, Volume down `command+down`, Volume up `command+up`, Cheat-sheet `shift+?` (ps: use ctrl for Windows/PC user)\n- Listen to songs from your Streams, Likes, Tracks or Playlists\n- Automatic update available notification\n\nThere's still known minor bugs which you can track on the <a href=\"https://github.com/Soundnode/soundnode-app/issues\" target=\"_blank\" title=\"Soundnode App issues list\">issues list</a> <br>\nand lots of features to come.\n\nCheers!\n","html":"<p>Soundnode App - The Soundcloud for desktop beta released! &lt;br&gt;\nThat being said you download the best version to your computer &lt;a href=&quot;http://www.soundnodeapp.com&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;here&lt;/a&gt; and &lt;strong&gt;out of the box&lt;/strong&gt; click, authenticate your user and start to listen to songs.</p>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n    &lt;img src=&quot;/assets/images/post-images/soundenode-0-1-0.png&quot; alt=&quot;Sublime Text 3 jump to definition/method&quot;&gt;\n&lt;/div&gt;</p>\n\n<h2>Current Features</h2>\n\n<ul><li>Search</li><li>Keyboard shortcuts (not native for this release)\nPlay/Pause <code>command+return</code> or <code>space</code>, Prev <code>command+left</code>, Next <code>command+right</code>, Volume down <code>command+down</code>, Volume up <code>command+up</code>, Cheat-sheet <code>shift+?</code> (ps: use ctrl for Windows/PC user)</li><li>Listen to songs from your Streams, Likes, Tracks or Playlists</li><li>Automatic update available notification</li></ul>\n\n<p>There&#39;s still known minor bugs which you can track on the &lt;a href=&quot;https://github.com/Soundnode/soundnode-app/issues&quot; target=&quot;_blank&quot; title=&quot;Soundnode App issues list&quot;&gt;issues list&lt;/a&gt; &lt;br&gt;\nand lots of features to come.</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Soundnode App - Soundcloud for desktop released","meta_description":"Soundnode App - The Soundcloud for desktop beta released!","author_id":1},{"id":27,"uuid":"9709dbe8-c181-4a86-9d95-2c7540eafb76","title":"Speaking at Front in BH conference","slug":"speaking-at-front-in-bh-conference-2014","markdown":"\n\nLast weekend I spoke at <a href=\"http://frontinbh.com.br/\" target=\"_blank\" title=\"Front in BH 2014\">Front in BH 2014</a> (in Belo Horizonte - Br) the biggest conference for Front End developers in Brazil.\n\n**Speakers and Conference staff**\n<div class=\"fluidImg\">\n    <img src=\"/assets/images/post-images/all-speakers-front-in-bh.jpg\" alt=\"All speakers at Front in BH 2014\">\n</div>\n\n\nI'm going to start saying that the conference was amazing. The organization was incredibly great. The topic that each speaker spoke was very enjoyable and knowledgeable. <br>\nThere was attendees from 4 different countries and at least 3 speakers were foreign as well known companies like Liferay, Github, Opera, Globo.com, Avenue Code and more.\n\nThe talks were from \"`UI testing frameworks`\" \"`Node.js`\" \"`UX on Google Glass`\" \"`Workflow for designers and developers`\" \"`Polifylls`\" \"`augmented reality on the Web`\" to more client-side/Javascript related topics.\n\n### My talk\n\n<div class=\"fluidImg\">\n    <img src=\"/assets/images/post-images/myself-speaking.jpg\" alt=\"Michael Lancaster on beyond the web with Nodewebkit\">\n</div>\n\n<br>\nThe title of my talk is/was `Beyond the Web` where I exploited the difficulties of a Web developer on build native Apps for desktop or mobile (the talk was focused on desktop) and showed how this is easily possible nowadays with many App runtimes like Nodewebkit.\n\nI was a bit nervous but I was more excited to present a nice content to the attendees and show them new possibilities therefore I was prepared and happy to be there speaking about that topic to a such good crowd of people wanting to learn new things.\n\nYou can check out my slides on <a href=\"https://speakerdeck.com/weblancaster/beyond-the-web-with-nodewebkit\" title=\"Beyond the Web with Nodewebkit by Michael Lancaster\" target=\"_blank\">Speaker deck</a> or below.\n\n<script async class=\"speakerdeck-embed\" data-id=\"015874f0f7460131223b568bbdf7fd4f\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<br>\nI had a wonderful experience. Now. I hope do more talks. <br>\nCheers!\n\n**Attendees (the ones that stayed until the end), Speakers and conference staff**\n<div class=\"fluidImg\">\n    <img src=\"/assets/images/post-images/everybody.jpg\" alt=\"Attendees and speakers\">\n</div>","html":"<p>Last weekend I spoke at &lt;a href=&quot;http://frontinbh.com.br/&quot; target=&quot;_blank&quot; title=&quot;Front in BH 2014&quot;&gt;Front in BH 2014&lt;/a&gt; (in Belo Horizonte - Br) the biggest conference for Front End developers in Brazil.</p>\n\n<p><strong>Speakers and Conference staff</strong>\n&lt;div class=&quot;fluidImg&quot;&gt;\n    &lt;img src=&quot;/assets/images/post-images/all-speakers-front-in-bh.jpg&quot; alt=&quot;All speakers at Front in BH 2014&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>I&#39;m going to start saying that the conference was amazing. The organization was incredibly great. The topic that each speaker spoke was very enjoyable and knowledgeable. &lt;br&gt;\nThere was attendees from 4 different countries and at least 3 speakers were foreign as well known companies like Liferay, Github, Opera, Globo.com, Avenue Code and more.</p>\n\n<p>The talks were from &quot;<code>UI testing frameworks</code>&quot; &quot;<code>Node.js</code>&quot; &quot;<code>UX on Google Glass</code>&quot; &quot;<code>Workflow for designers and developers</code>&quot; &quot;<code>Polifylls</code>&quot; &quot;<code>augmented reality on the Web</code>&quot; to more client-side/Javascript related topics.</p>\n\n<h3>My talk</h3>\n\n<p>&lt;div class=&quot;fluidImg&quot;&gt;\n    &lt;img src=&quot;/assets/images/post-images/myself-speaking.jpg&quot; alt=&quot;Michael Lancaster on beyond the web with Nodewebkit&quot;&gt;\n&lt;/div&gt;</p>\n\n<p>&lt;br&gt;\nThe title of my talk is/was <code>Beyond the Web</code> where I exploited the difficulties of a Web developer on build native Apps for desktop or mobile (the talk was focused on desktop) and showed how this is easily possible nowadays with many App runtimes like Nodewebkit.</p>\n\n<p>I was a bit nervous but I was more excited to present a nice content to the attendees and show them new possibilities therefore I was prepared and happy to be there speaking about that topic to a such good crowd of people wanting to learn new things.</p>\n\n<p>You can check out my slides on &lt;a href=&quot;https://speakerdeck.com/weblancaster/beyond-the-web-with-nodewebkit&quot; title=&quot;Beyond the Web with Nodewebkit by Michael Lancaster&quot; target=&quot;_blank&quot;&gt;Speaker deck&lt;/a&gt; or below.</p>\n\n<p>&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;015874f0f7460131223b568bbdf7fd4f&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</p>\n\n<p>&lt;br&gt;\nI had a wonderful experience. Now. I hope do more talks. &lt;br&gt;\nCheers!</p>\n\n<p><strong>Attendees (the ones that stayed until the end), Speakers and conference staff</strong>\n&lt;div class=&quot;fluidImg&quot;&gt;\n    &lt;img src=&quot;/assets/images/post-images/everybody.jpg&quot; alt=&quot;Attendees and speakers&quot;&gt;\n&lt;/div&gt;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Speaking at Front in BH conference","meta_description":"Last weekend I spoke at Front in BH the biggest conference for Front End developers and related areas in Brazil.","author_id":1},{"id":28,"uuid":"36d990ac-1abc-4491-9b5a-0ab2d8bd3a5d","title":"Ep.1 Data Structures and Algorithms with JS","slug":"javascript-data-structure-algorithms-series-ep1","markdown":"\n\nI don't have officially a Computer Science degree.. But clearly nowadays you wont need a degree as engineer. You just need to be passionated to what you do and have that eager to learn and always evolve.\n\nThat being said I have been always trying to learn and evolve to be better on what I do which I'm passionated about.\n\nAnyway. Web applications has evolved to a much complex system and with that Developers/Engineers are being \"forced\" to solve problems (could be the other way around) applying concepts of Computer Science which before you would just see on systems/programs using languages such as C, C++, Java and so on.\n\nWhat I want to do here it's not just help me improve/evolve my knowledge also share the basics of Data Structures and Algorithms exploring some concepts with Javascript where what kind of Data Structure is more efficient than other or when certain Algorithm perform better than others.\n\nI'm not a Computer Scientist and this Series of posts wont be very advanced but I'm sure will be worthwhile.\n\nCheers!\n\n<small>* the mainly inspiration for this series is based on the book <a href=\"http://www.amazon.com/Structures-Algorithms-JavaScript-Michael-McMillan/dp/1449364934/ref=sr_1_1?ie=UTF8&qid=1407385377&sr=8-1&keywords=data+structures+and+algorithms+in+javascript\" title=\"Data Structures and Algorithms with JavaScript\" target=\"_blank\">Data Structures and Algorithms with JavaScript</a>, articles/posts and videos around the Web.</small>","html":"<p>I don&#39;t have officially a Computer Science degree.. But clearly nowadays you wont need a degree as engineer. You just need to be passionated to what you do and have that eager to learn and always evolve.</p>\n\n<p>That being said I have been always trying to learn and evolve to be better on what I do which I&#39;m passionated about.</p>\n\n<p>Anyway. Web applications has evolved to a much complex system and with that Developers/Engineers are being &quot;forced&quot; to solve problems (could be the other way around) applying concepts of Computer Science which before you would just see on systems/programs using languages such as C, C++, Java and so on.</p>\n\n<p>What I want to do here it&#39;s not just help me improve/evolve my knowledge also share the basics of Data Structures and Algorithms exploring some concepts with Javascript where what kind of Data Structure is more efficient than other or when certain Algorithm perform better than others.</p>\n\n<p>I&#39;m not a Computer Scientist and this Series of posts wont be very advanced but I&#39;m sure will be worthwhile.</p>\n\n<p>Cheers!</p>\n\n<p>&lt;small&gt;* the mainly inspiration for this series is based on the book &lt;a href=&quot;http://www.amazon.com/Structures-Algorithms-JavaScript-Michael-McMillan/dp/1449364934/ref=sr<em>1</em>1?ie=UTF8&amp;qid=1407385377&amp;sr=8-1&amp;keywords=data+structures+and+algorithms+in+javascript&quot; title=&quot;Data Structures and Algorithms with JavaScript&quot; target=&quot;_blank&quot;&gt;Data Structures and Algorithms with JavaScript&lt;/a&gt;, articles/posts and videos around the Web.&lt;/small&gt;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Ep.1 Data Structures and Algorithms with JS","meta_description":"I don't have officially a Computer Science degree.. But clearly nowadays you wont need a degree as engineer. You just need to be passionated to what you do and have that eager to learn and always evolve.","author_id":1},{"id":29,"uuid":"151b44e0-b594-43ae-9f76-321abb7d7e6d","title":"Javascript Object Oriented simple form validation","slug":"javascript-object-oriented-simple-form-validation","markdown":"\n\nToday I want to show you how to build a simple form validation with Object Oriented programming in Javascript.\n\n### Why Object Oriented\n\nObject Oriented programming aim to provide a model of programming based on Objects where an Object has both behaviors state (data) and behavior (code). <br>\nTherefore focus on Objects rather than actions and data rather than logic with that our advantages are a more clear modular structure, easier to maintain and modify since we can create more objects with small differences from the exiting ones.\n\n**The core concepts**\n\n- Objects\n- Classes\n- Data Abstraction and Encapsulation\n- Inheritance\n- Polymorphism\n\n\n## OO form validation\n\nHere's our simple form validation in javascript based on Object Oriented programming. <br>\nOur scenario: validate fields when form is submitted.\n\nFirst things first... Let's create our class called `Validator` and also create our constructor called as method `constructor` which is responsible to setup our basic data.\n\n<pre><code data-language=\"Javascript\">\n;(function(window, undefined) {\n  \n  var Validator = {\n    \n    constructor: function(form, config) {\n      this._elForm = form;\n      this._els = config.fields || {};\n    }\n  \n  }\n  \n})(window, undefined);\n</code></pre>\n\nNow let's create our initializer called `init` and initialize the program adding a listener to the form using the info/data was passed to our constructor. <br>\n\n<pre><code data-language=\"Javascript\">\n;(function(window, undefined) {\n  \n  var Validator = {\n    \n    constructor: function(form, config) {\n      this._elForm = form;\n      this._els = config.fields || {};\n      \n      this.init();\n    },\n    \n    init: function() {\n      this.addFormListener();\n    },\n    \n    addFormListener: function() {\n        var formSelector = this._elForm\n          , elForm = document.querySelector(formSelector);\n          \n          elForm.addEventListener('submit', this.validate.bind(this), false);\n    }\n  \n  }\n  \n})(window, undefined);\n</code></pre>\n\nThe method called `addFormListener` does what it's named.. we add a listener to the form to when submitted trigger a method and also chain a method called `bind` which call the method `this.validate` with the context of the class instead of send the object clicked `form`.\n\nThe example below we are going add the method to `validate` which is responsible to test against the field requirement `required`, `empty` or `maxlength` and then add a CSS class to the input field.\n\n<pre><code data-language=\"Javascript\">\n;(function(window, undefined) {\n  \n  var Validator = {\n    \n    constructor: function(form, config) {\n      this._elForm = form;\n      this._els = config.fields || {};\n      \n      this.init();\n    },\n    \n    init: function() {\n      this.addFormListener();\n    },\n    \n    addFormListener: function() {\n        var formSelector = this._elForm\n          , elForm = document.querySelector(formSelector);\n          \n          elForm.addEventListener('submit', this.validate.bind(this), false);\n    },\n    \n    validate: function(e) {\n      var elFields = this._els;\n      \n      for ( var field in elFields ) {\n        var el = document.querySelector(field)\n          , elVal = el.value;\n          \n        if ( elFields[field].require || elVal === '' || elVal.length > elFields[field].maxlength ) {\n          el.classList.add('invalid');\n        }\n      }\n      \n      e.preventDefault();\n    }\n  \n  }\n  \n})(window, undefined);\n</code></pre>\n\nWe simply create a new object which are going to inherit directly from our class/object and call the constructor passing the `form ID` and an Object containing an Object called `fields` which contain all fields that need to be validate with our requirements `required` and `maxlength`.\n\n<pre><code data-language=\"Javascript\">\nvar form1 = Object.create(Validator);\nform1.constructor('#form1', {\n  fields: {\n    '#fname': {\n      required: true,\n      maxlength: 20\n    },\n    '#lname': {\n      maxlength: 10\n    }\n  }\n});\n</code></pre>\n\nAs a reference the HTML markup looks like this.\n\n<pre><code data-language=\"html\">\n<form id=\"form1\">\n    <fieldset>\n        <legend>Person</legend>\n        <p>\n            <label for=\"fname\">First name:</label>\n            <input type=\"text\" name=\"fname\" id=\"fname\" />\n        </p>\n        <p>\n            <label for=\"lname\">Last name:</label>\n            <input type=\"text\" name=\"fname\" id=\"lname\" />\n        </p>\n        <input type=\"submit\" name=\"submit\" class=\"submit\" value=\"Submit\" />\n    </fieldset>\n</form>\n</code></pre>\n\nNote that we can use a different design pattern to just the `constructor` method be accessible, but let's keep it simple. <br>\nAlso note that in ES6 this OO Approach are going to very clear on how to use the API.\n\nCheers!","html":"<p>Today I want to show you how to build a simple form validation with Object Oriented programming in Javascript.</p>\n\n<h3>Why Object Oriented</h3>\n\n<p>Object Oriented programming aim to provide a model of programming based on Objects where an Object has both behaviors state (data) and behavior (code). &lt;br&gt;\nTherefore focus on Objects rather than actions and data rather than logic with that our advantages are a more clear modular structure, easier to maintain and modify since we can create more objects with small differences from the exiting ones.</p>\n\n<p><strong>The core concepts</strong></p>\n\n<ul><li>Objects</li><li>Classes</li><li>Data Abstraction and Encapsulation</li><li>Inheritance</li><li>Polymorphism</li></ul>\n\n<h2>OO form validation</h2>\n\n<p>Here&#39;s our simple form validation in javascript based on Object Oriented programming. &lt;br&gt;\nOur scenario: validate fields when form is submitted.</p>\n\n<p>First things first... Let&#39;s create our class called <code>Validator</code> and also create our constructor called as method <code>constructor</code> which is responsible to setup our basic data.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;\n;(function(window, undefined) {</p>\n\n<p>  var Validator = {</p>\n\n<pre><code>constructor: function(form, config) {\n  this._elForm = form;\n  this._els = config.fields || {};\n}</code></pre>\n\n<p>  }</p>\n\n<p>})(window, undefined);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now let&#39;s create our initializer called <code>init</code> and initialize the program adding a listener to the form using the info/data was passed to our constructor. &lt;br&gt;</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;\n;(function(window, undefined) {</p>\n\n<p>  var Validator = {</p>\n\n<pre><code>constructor: function(form, config) {\n  this._elForm = form;\n  this._els = config.fields || {};\n\n  this.init();\n},\n\ninit: function() {\n  this.addFormListener();\n},\n\naddFormListener: function() {\n    var formSelector = this._elForm\n      , elForm = document.querySelector(formSelector);\n\n      elForm.addEventListener(&#39;submit&#39;, this.validate.bind(this), false);\n}</code></pre>\n\n<p>  }</p>\n\n<p>})(window, undefined);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>The method called <code>addFormListener</code> does what it&#39;s named.. we add a listener to the form to when submitted trigger a method and also chain a method called <code>bind</code> which call the method <code>this.validate</code> with the context of the class instead of send the object clicked <code>form</code>.</p>\n\n<p>The example below we are going add the method to <code>validate</code> which is responsible to test against the field requirement <code>required</code>, <code>empty</code> or <code>maxlength</code> and then add a CSS class to the input field.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;\n;(function(window, undefined) {</p>\n\n<p>  var Validator = {</p>\n\n<pre><code>constructor: function(form, config) {\n  this._elForm = form;\n  this._els = config.fields || {};\n\n  this.init();\n},\n\ninit: function() {\n  this.addFormListener();\n},\n\naddFormListener: function() {\n    var formSelector = this._elForm\n      , elForm = document.querySelector(formSelector);\n\n      elForm.addEventListener(&#39;submit&#39;, this.validate.bind(this), false);\n},\n\nvalidate: function(e) {\n  var elFields = this._els;\n\n  for ( var field in elFields ) {\n    var el = document.querySelector(field)\n      , elVal = el.value;\n\n    if ( elFields[field].require || elVal === &#39;&#39; || elVal.length &gt; elFields[field].maxlength ) {\n      el.classList.add(&#39;invalid&#39;);\n    }\n  }\n\n  e.preventDefault();\n}</code></pre>\n\n<p>  }</p>\n\n<p>})(window, undefined);\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>We simply create a new object which are going to inherit directly from our class/object and call the constructor passing the <code>form ID</code> and an Object containing an Object called <code>fields</code> which contain all fields that need to be validate with our requirements <code>required</code> and <code>maxlength</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;\nvar form1 = Object.create(Validator);\nform1.constructor(&#39;#form1&#39;, {\n  fields: {\n    &#39;#fname&#39;: {\n      required: true,\n      maxlength: 20\n    },\n    &#39;#lname&#39;: {\n      maxlength: 10\n    }\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>As a reference the HTML markup looks like this.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;\n&lt;form id=&quot;form1&quot;&gt;\n    &lt;fieldset&gt;\n        &lt;legend&gt;Person&lt;/legend&gt;\n        &lt;p&gt;\n            &lt;label for=&quot;fname&quot;&gt;First name:&lt;/label&gt;\n            &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;fname&quot; /&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;label for=&quot;lname&quot;&gt;Last name:&lt;/label&gt;\n            &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;lname&quot; /&gt;\n        &lt;/p&gt;\n        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\n    &lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Note that we can use a different design pattern to just the <code>constructor</code> method be accessible, but let&#39;s keep it simple. &lt;br&gt;\nAlso note that in ES6 this OO Approach are going to very clear on how to use the API.</p>\n\n<p>Cheers!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Javascript Object Oriented simple form validation","meta_description":"Today I want to show you how to build a simple form validation with Object Oriented programming in Javascript.","author_id":1},{"id":30,"uuid":"4d2e38d6-2ff9-4cd7-87d1-8e5354db1ace","title":"Ep.2 Data Structures and Algorithms with JS - Arrays","slug":"javascript-data-structure-algorithms-series-ep2-arrays","markdown":"\n\n<div class=\"intro-series\">\n    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you <a href=\"/blog/javascript-data-structure-algorithms-series-ep1/\" title=\"Data Structures and Algorithms Ep.1\">the introduction</a> to this series of posts if you haven't read yet. thanks.\n</div>\n\n### Brushing up on Arrays\n\nThis is the second post on the series of Data Structure and Algorithms with JS - focused on Array. <br>\nNotice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using in the future on more complex topics.\n\nEvery programming language has sort of a built-in Array where you can access data via index and most of these languages has a strict type of Array which would be integer BUT not in Javascript, where Array is also an object which when integers used for index they are converted to strings. <br>\nAnd Array being an object means that it contain properties and functions you can use out of the box.\n\nIn Javascript we don't need to define the length of our Array as in C++ and we can have different types of values therefore making Arrays in Javascript flexible and easier to manipulate than other classic languages.\n\n### Creating Arrays\n\nLet's create an Array with length zero:\n\n<pre><code data-language=\"javascript\">\nvar arr = []; // arr.length = 0\n</code></pre>\n\nNow let's create an Array with some elements defined and length equal 5:\n\n<pre><code data-language=\"javascript\">\nvar arr = ['a', 'b', 'c', 'd', 'e']; // arr.length = 5\n</code></pre>\n\nArray with different types would look like:\n\n<pre><code data-language=\"javascript\">\nvar arr = ['michael', 'lancaster', 23, true, null];\n</code></pre>\n\nIf you want to verify if an object is an Array you can use the method `Arrays.isArray()`\n\n<pre><code data-language=\"javascript\">\nvar arr = ['a', 'b', 'c', 'd', 'e'];\nArray.isArray(arr); // true\n\nvar str = 'Michael Lancaster';\nArray.isArray(str); // false\n</code></pre>\n\n### Accessing\n\nUse the operator `[]` passing the index to access the value/element.\n\n<pre><code data-language=\"javascript\">\nvar arr = ['a', 'b', 'c', 'd', 'e'];\nconsole.log( arr[2] ) // c\nconsole.log( arr[4] ) // e\n</code></pre>\n\nAlso iterating through an Array sequentially\n\n<pre><code data-language=\"javascript\">\nvar arr = [1, 2, 3, 4, 5];\nfor ( var i = 0; i < arr.length; i++ ) {\n    console.log('Index: ' + i, 'Value: ' + arr[i])\n}\n\n// outputs\n// Index: 0 Value: 1\n// Index: 1 Value: 2\n// Index: 2 Value: 3\n// Index: 3 Value: 4\n// Index: 4 Value: 5 \n</code></pre>\n\nNotice on the sample above that the loop is controlled by the length of the Array `arr.length` since in Javascript Array is an object and it can be modified so we guarantee that we have gone through all indexes.\n\n### Array from String\n\nWe can also create Arrays from strings defining a delimiter (`space` in my case).\n\n<pre><code data-language=\"javascript\">\nvar str = 'Michael lancaster 23 and developer';\nvar arr = str.split(' '); // [\"Michael\", \"lancaster\", \"23\", \"and\", \"developer\"]\n</code></pre>\n\n### Object Copy\n\nThere's several ways of Object copy `Shallow Copy`, `Deep Copy` and `Lazy Copy`.\n\nThe `Shallow Copy` is when you assign \"A = B\" which has the disadvantage of when modifying Array B the Array A will also be modified with same values/elements as B no matter what. Here's an example of `Shallow Copy`.\n\n<pre><code data-language=\"javascript\">\nvar arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar arr2 = arr1;\nconsole.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\narr1.push('michael');\nconsole.log(arr1) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"michael\"]\nconsole.log(arr2) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"michael\"]\n</code></pre>\n\nWhen we pushed a new value to the end of `arr1` this change is reflected into `arr2`.\n\nA better way to do a copy would be the `Deep Copy` which one don't depend on another but it's a slower operation. <br>\nHere's an example of `Deep Copy`\n\n<pre><code data-language=\"javascript\">\nvar arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar arr2 = [];\n\nfunction deepCopy(arr1, arr2) {\n    for ( var i = 0; i < arr1.length; i++ ) {\n        arr2[i] = arr1[i];\n    }\n}\n\ndeepCopy(arr1, arr2);\n\nconsole.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\narr1.push('michael')\nconsole.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"michael\"] \nconsole.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\nIn the example above you can notice that the value pushed to `arr1` do not reflected into `arr2`.\nNow. `Lazy Copy` is the combination of both operations.\n\n### Array traversal and mutation operations\n\nArray is list-like and also a constructor that contains prototype methods to perform traversal and mutation operations such as:\n\n**Searching a value**\n\nSearching a value can be done with the method `Array.prototype.indexOf()` which perform an operation of comparing with `===` the value passed to the function is found and return it's index position otherwise will return -1.\n\n<pre><code data-language=\"javascript\">\nvar languages = ['Javascript', 'Java', 'C++', 'Go'];\nlanguages.indexOf('C++') // 2\n</code></pre>\n\nNotice that this search operation using the `indexOf` will return the just the position of the `first` value encountered in the Array.\nYou can also the 'lastIndexOf' which will do the same but return the position of the last value encountered.\n\n<pre><code data-language=\"javascript\">\nvar languages = ['Javascript', 'Java', 'C++', 'Go', 'Lua', 'C++'];\nlanguages.lastIndexOf('C++') // 5\n</code></pre>\n\n**String from Arrays**\n\nThere's two methods to return a string representation from an Array `Array.prototype.join()` and `Array.prototype.toString()`. <br>\nIt's automatically delimited by commas but you can pass your delimiter on the method. Here's an example using `join` and `toString`.\n\n<pre><code data-language=\"javascript\">\nvar languages = ['Javascript', 'Java', 'C++', 'Go', 'Lua'];\nlanguages.join(); // \"Javascript,Java,C++,Go,Lua\"\nlanguages.toString(); // \"Javascript,Java,C++,Go,Lua\"\n</code></pre>\n\n**New Array from Array**\n\nThere's also multiple methods to create an Array from another Array `Array.prototype.concat()` and `Array.prototype.splice()`.\nThe `Array.prototype.concat()` method allow you to pass one or more Arrays/Values as argument to create a new Array.\n\n<pre><code data-language=\"javascript\">\nvar cats = ['Abyssinian', 'Persian', 'Peterbald'];\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nvar birds = ['Malleefowl', 'Maleo'];\n\nvar petAnimals = cats.concat(dogs, birds);\nconsole.log(petAnimals); // [\"Abyssinian\", \"Persian\", \"Peterbald\", \"Alaskan Klee Kai\", \"American Bulldog\", \"Pitbull\", \"Malleefowl\", \"Maleo\"];\n</code></pre>\n\nThe `Array.prototype.splice()` takes two arguments (minimum) or more. You can also use to add new elements to the middle of an Array. <br>\nThey are going to be used to mutate the Array therefore it can add new elements and/or remove old elements.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nvar removedDogs = dogs.splice(2, 0, \"Bull Terrier\");\nconsole.log(dogs); // [\"Alaskan Klee Kai\", \"American Bulldog\", \"Bull Terrier\", \"Pitbull\"]\nconsole.log(removedDogs); // [] empty since no values/elements were removed\n</code></pre>\n\nAbove the order of my arguments are `.splice(from index, remove, enter new element)` so looking at my arguments we have inserted a new value `Bull terrier` removed `0` and started at index `2`.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nvar removedDogs = dogs.splice(1, 1, \"Bull Terrier\");\nconsole.log(dogs); // [\"Alaskan Klee Kai\", \"Bull Terrier\", \"Pitbull\"]\nconsole.log(removedDogs); // [\"American Bulldog\"]\n</code></pre>\n\nThe code above I said .splice `from index 1, remove index 1, insert 'Bull Terrier'` so now the variable `removedDogs` contain the item removed from the index defined which in this case is `1`.\n\n### Adding elements/values to an Array\n\nSo instead of use the length of an Array to add an element to the end or even harder to add an element to the beginning of an Array which you would have to iterate through the Array and shift the index from the end towards start.\nAnyway. Let's keep it simple with these two methods to add new elements to an Array `Array.prototype.push()` add to the end of an Array and `Array.prototype.unshift()` add to the beginning of an Array (Both methods accept multiple values/elements passed as arguments). <br>\n\nThe `push()` function/method add a value/element to the end of an Array.<br>\nHere's an example.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nconsole.log(dogs); // ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\ndogs.push('Bull Terrier');\nconsole.log(dogs); // [\"Alaskan Klee Kai\", \"American Bulldog\", \"Pitbull\", \"Bull Terrier\"]\n</code></pre>\n\nThe `unshift()` function/method add a value/element to the beginning of an Array. <br>\nHere's an example.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nconsole.log(dogs); // ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\ndogs.unshift('American Bulldog');\nconsole.log(dogs); // [\"American Bulldog\", \"Alaskan Klee Kai\", \"American Bulldog\", \"Pitbull\"]\n</code></pre>\n\n### Removing elements/values from an Array\n\nThere's also two methods to remove values/elements from an Array where you can remove the beginning using `Array.prototype.shift()` or if you want to remove from the end you can use `Array.prototype.pop()`.\n\nHere's an example to remove the first element using the `Array.prototype.shift()` method.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nconsole.log(dogs); // ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\ndogs.shift();\nconsole.log(dogs); // [ 'American Bulldog', 'Pitbull'];\n</code></pre>\n\nAnd here's an example to remove the last element using the `Array.prototype.pop()` method.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nconsole.log(dogs); // ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\ndogs.pop();\nconsole.log(dogs); // ['Alaskan Klee Kai', 'American Bulldog'];\n</code></pre>\n\n### Ordering/Sorting elements\n\nThere's also two ways to order/sort an Array `Array.prototype.reverse()` which are going to do what says and `Array.prototype.sort()` to put elements in order but in this case the method `Array.prototype.sort()` turns every value in strings so if you have numbers you are going to need to pass a function and order the numbers.\n\nHere's an example of `Array.prototype.reverse()`.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\nconsole.log(dogs); // ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\ndogs.reverse();\nconsole.log(dogs); // [\"Pitbull\", \"American Bulldog\", \"Alaskan Klee Kai\"];\n</code></pre>\n\nHere's an example of `Array.prototype.sort()` with strings.\n\n<pre><code data-language=\"javascript\">\nvar alphabet = ['a', 'b', 'e', 'z', 'f', 'c'];\nconsole.log(alphabet); // ['a', 'b', 'e', 'z', 'f', 'c']\n\nalphabet.sort();\nconsole.log(alphabet); // [\"a\", \"b\", \"c\", \"e\", \"f\", \"z\"]\n</code></pre>\n\nAnd here's an example of how to pass a function to `Array.prototype.sort()` to order numbers.\n\n<pre><code data-language=\"javascript\">\nvar nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\nconsole.log(nums) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\nnums.sort(function(n1, n2) {\n  return n1 - n2;\n});\n\nconsole.log(nums) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n### Iterator methods\n\nThe iterator methods/functions are going to be applied for each value/element and may or may not return a new array, groups of values or just a value as result of the operation.\n\nFirst let's talk about the `Array.prototype.forEach()` which receive a callback as argument and this callback has three arguments respectively `element`, `index`, `array being traversed` going to iterate on ascending order. <br>\nHere's an example using `Array.prototype.forEach()`.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\ndogs.forEach(function(value, index, array) {\n    console.log('Dog breed: ' + value + ', position: ' + index);\n});\n\n// outputs\n// Dog breed: Alaskan Klee Kai, position: 0\n// Dog breed: American Bulldog, position: 1\n// Dog breed: Pitbull, position: 2 \n</code></pre>\n\nNow it's time to show the `Array.prototype.every()` which test a condition against each element and return true in case all elements meet the condition or false. <br>\nAlso receives a callback as argument and this callback has three arguments respectively `element`, `index`, `array being traversed`.\n\n<pre><code data-language=\"javascript\">\nvar nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nvar meetCondition = nums.every(function(element, index, array) {\n    return (element < 11);\n});\n\nconsole.log(meetCondition) // true\n</code></pre>\n\nIn the code above all elements are tested against the condition to check if they are less than 11 in our case all elements are less than 11 so the result returned is true.\n\nThe method/function `Array.prototype.some()` works almost the same way as `Array.prototype.every()` but in this case if at least one element meet the condition would return true.\n\n<pre><code data-language=\"javascript\">\nvar nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nvar meetCondition = nums.some(function(element, index, array) {\n    return (element === 11);\n});\n\nconsole.log(meetCondition) // true\n</code></pre>\n\nThe `Array.prototype.reduce()` method run a function against an accumulator for each element until reduce to one single value.\n\n<pre><code data-language=\"javascript\">\nvar nums = [100, 200, 300, 400];\n\nnums.reduce(function(a, b) {\n\tconsole.log('a', a);\n   \tconsole.log('b', b);\n   \tconsole.log('result accumulated is: ', a + b);\n    return a + b;\n});\n\n// output\n\n// a 100\n// b 200\n// result accumulated is: 300\n// a 300\n// b 300\n// result accumulated is: 600\n// a 600\n// b 400\n// result accumulated is: 1000\n</code></pre>\n\nAs you can see our method `Array.prototype.reduce()` receive a function with two arguments `previous value` and `current value` a + b which the result turns into the `accumulator` a and then calculate this result against the next in line which is b and so on so forth. <br>\nYou can also pass `initial value` where it's going to turn into the `previous value` and the original `previous value` turn into `current value`.\n\n<pre><code data-language=\"javascript\">\nvar nums = [100, 200, 300, 400];\n\nnums.reduce(function(a, b) {\n\tconsole.log('a', a);\n   \tconsole.log('b', b);\n   \tconsole.log('result accumulated is: ', a + b);\n    return a + b;\n}, 200);\n\n// output\n\n// a 200\n// b 100\n// result accumulated is: 300\n// a 300\n// b 200\n// result accumulated is: 500\n// a 500\n// b 300\n// result accumulated is: 800\n// a 800\n// b 400\n// result accumulated is: 1200\n// 1200\n</code></pre>\n\nThere's also the possibility to use `Array.prototype.reduceRight()` which is going to perform the function on each element of the array from the end to start.\n\nthe `Array.prototype.map()` method works the same way `Array.prototype.forEach()` method works but return a new Array as the difference between the two methods.\n\n<pre><code data-language=\"javascript\">\nvar dogs = ['Alaskan Klee Kai', 'American Bulldog', 'Pitbull'];\n\nvar newArr = dogs.map(function(value, index, array) {\n    console.log('Dog breed: ' + value + ', position: ' + index);\n    return value;\n});\n\nconsole.log(newArr);\n\n// outputs\n// Dog breed: Alaskan Klee Kai, position: 0\n// Dog breed: American Bulldog, position: 1\n// Dog breed: Pitbull, position: 2 \n\n// [\"Alaskan Klee Kai\", \"American Bulldog\", \"Pitbull\"]\n</code></pre>\n\nThe `Array.prototype.filter()` method works almost the same way as `Array.prototype.every()` but instead return an Array with the elements that met the condition `true`.\n\n<pre><code data-language=\"javascript\">\nvar nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nvar numsLessThan5 = nums.filter(function(element, index, array) {\n    return (element < 5);\n});\n\nconsole.log(numsLessThan5) // [0, 1, 2, 3, 4] \n</code></pre>\n\n### That's it\n\nI hope you have brush up on your Array knowledge being aware of we can use and will use more complex approaches applying some of the topics I covered on this post. <br>\n\nCheers!\n\n<small>* Don't be shy. I will appreciate any improvement and/or fix.</small>\n\n\n\n\n","html":"<p>&lt;div class=&quot;intro-series&quot;&gt;\n    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.\n&lt;/div&gt;</p>\n\n<h3>Brushing up on Arrays</h3>\n\n<p>This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. &lt;br&gt;\nNotice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using in the future on more complex topics.</p>\n\n<p>Every programming language has sort of a built-in Array where you can access data via index and most of these languages has a strict type of Array which would be integer BUT not in Javascript, where Array is also an object which when integers used for index they are converted to strings. &lt;br&gt;\nAnd Array being an object means that it contain properties and functions you can use out of the box.</p>\n\n<p>In Javascript we don&#39;t need to define the length of our Array as in C++ and we can have different types of values therefore making Arrays in Javascript flexible and easier to manipulate than other classic languages.</p>\n\n<h3>Creating Arrays</h3>\n\n<p>Let&#39;s create an Array with length zero:</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr = []; // arr.length = 0\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now let&#39;s create an Array with some elements defined and length equal 5:</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; // arr.length = 5\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Array with different types would look like:</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr = [&#39;michael&#39;, &#39;lancaster&#39;, 23, true, null];\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>If you want to verify if an object is an Array you can use the method <code>Arrays.isArray()</code></p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];\nArray.isArray(arr); // true</p>\n\n<p>var str = &#39;Michael Lancaster&#39;;\nArray.isArray(str); // false\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Accessing</h3>\n\n<p>Use the operator <code>[]</code> passing the index to access the value/element.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];\nconsole.log( arr[2] ) // c\nconsole.log( arr[4] ) // e\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Also iterating through an Array sequentially</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr = [1, 2, 3, 4, 5];\nfor ( var i = 0; i &lt; arr.length; i++ ) {\n    console.log(&#39;Index: &#39; + i, &#39;Value: &#39; + arr[i])\n}</p>\n\n<p>// outputs\n// Index: 0 Value: 1\n// Index: 1 Value: 2\n// Index: 2 Value: 3\n// Index: 3 Value: 4\n// Index: 4 Value: 5 \n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Notice on the sample above that the loop is controlled by the length of the Array <code>arr.length</code> since in Javascript Array is an object and it can be modified so we guarantee that we have gone through all indexes.</p>\n\n<h3>Array from String</h3>\n\n<p>We can also create Arrays from strings defining a delimiter (<code>space</code> in my case).</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar str = &#39;Michael lancaster 23 and developer&#39;;\nvar arr = str.split(&#39; &#39;); // [&quot;Michael&quot;, &quot;lancaster&quot;, &quot;23&quot;, &quot;and&quot;, &quot;developer&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Object Copy</h3>\n\n<p>There&#39;s several ways of Object copy <code>Shallow Copy</code>, <code>Deep Copy</code> and <code>Lazy Copy</code>.</p>\n\n<p>The <code>Shallow Copy</code> is when you assign &quot;A = B&quot; which has the disadvantage of when modifying Array B the Array A will also be modified with same values/elements as B no matter what. Here&#39;s an example of <code>Shallow Copy</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar arr2 = arr1;\nconsole.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\narr1.push(&#39;michael&#39;);\nconsole.log(arr1) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]\nconsole.log(arr2) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>When we pushed a new value to the end of <code>arr1</code> this change is reflected into <code>arr2</code>.</p>\n\n<p>A better way to do a copy would be the <code>Deep Copy</code> which one don&#39;t depend on another but it&#39;s a slower operation. &lt;br&gt;\nHere&#39;s an example of <code>Deep Copy</code></p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar arr2 = [];</p>\n\n<p>function deepCopy(arr1, arr2) {\n    for ( var i = 0; i &lt; arr1.length; i++ ) {\n        arr2[i] = arr1[i];\n    }\n}</p>\n\n<p>deepCopy(arr1, arr2);</p>\n\n<p>console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\narr1.push(&#39;michael&#39;)\nconsole.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;] \nconsole.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>In the example above you can notice that the value pushed to <code>arr1</code> do not reflected into <code>arr2</code>.\nNow. <code>Lazy Copy</code> is the combination of both operations.</p>\n\n<h3>Array traversal and mutation operations</h3>\n\n<p>Array is list-like and also a constructor that contains prototype methods to perform traversal and mutation operations such as:</p>\n\n<p><strong>Searching a value</strong></p>\n\n<p>Searching a value can be done with the method <code>Array.prototype.indexOf()</code> which perform an operation of comparing with <code>===</code> the value passed to the function is found and return it&#39;s index position otherwise will return -1.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;];\nlanguages.indexOf(&#39;C++&#39;) // 2\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Notice that this search operation using the <code>indexOf</code> will return the just the position of the <code>first</code> value encountered in the Array.\nYou can also the &#39;lastIndexOf&#39; which will do the same but return the position of the last value encountered.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;, &#39;C++&#39;];\nlanguages.lastIndexOf(&#39;C++&#39;) // 5\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p><strong>String from Arrays</strong></p>\n\n<p>There&#39;s two methods to return a string representation from an Array <code>Array.prototype.join()</code> and <code>Array.prototype.toString()</code>. &lt;br&gt;\nIt&#39;s automatically delimited by commas but you can pass your delimiter on the method. Here&#39;s an example using <code>join</code> and <code>toString</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;];\nlanguages.join(); // &quot;Javascript,Java,C++,Go,Lua&quot;\nlanguages.toString(); // &quot;Javascript,Java,C++,Go,Lua&quot;\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p><strong>New Array from Array</strong></p>\n\n<p>There&#39;s also multiple methods to create an Array from another Array <code>Array.prototype.concat()</code> and <code>Array.prototype.splice()</code>.\nThe <code>Array.prototype.concat()</code> method allow you to pass one or more Arrays/Values as argument to create a new Array.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar cats = [&#39;Abyssinian&#39;, &#39;Persian&#39;, &#39;Peterbald&#39;];\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nvar birds = [&#39;Malleefowl&#39;, &#39;Maleo&#39;];</p>\n\n<p>var petAnimals = cats.concat(dogs, birds);\nconsole.log(petAnimals); // [&quot;Abyssinian&quot;, &quot;Persian&quot;, &quot;Peterbald&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Malleefowl&quot;, &quot;Maleo&quot;];\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>The <code>Array.prototype.splice()</code> takes two arguments (minimum) or more. You can also use to add new elements to the middle of an Array. &lt;br&gt;\nThey are going to be used to mutate the Array therefore it can add new elements and/or remove old elements.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nvar removedDogs = dogs.splice(2, 0, &quot;Bull Terrier&quot;);\nconsole.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]\nconsole.log(removedDogs); // [] empty since no values/elements were removed\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Above the order of my arguments are <code>.splice(from index, remove, enter new element)</code> so looking at my arguments we have inserted a new value <code>Bull terrier</code> removed <code>0</code> and started at index <code>2</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nvar removedDogs = dogs.splice(1, 1, &quot;Bull Terrier&quot;);\nconsole.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]\nconsole.log(removedDogs); // [&quot;American Bulldog&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>The code above I said .splice <code>from index 1, remove index 1, insert &#39;Bull Terrier&#39;</code> so now the variable <code>removedDogs</code> contain the item removed from the index defined which in this case is <code>1</code>.</p>\n\n<h3>Adding elements/values to an Array</h3>\n\n<p>So instead of use the length of an Array to add an element to the end or even harder to add an element to the beginning of an Array which you would have to iterate through the Array and shift the index from the end towards start.\nAnyway. Let&#39;s keep it simple with these two methods to add new elements to an Array <code>Array.prototype.push()</code> add to the end of an Array and <code>Array.prototype.unshift()</code> add to the beginning of an Array (Both methods accept multiple values/elements passed as arguments). &lt;br&gt;</p>\n\n<p>The <code>push()</code> function/method add a value/element to the end of an Array.&lt;br&gt;\nHere&#39;s an example.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nconsole.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>dogs.push(&#39;Bull Terrier&#39;);\nconsole.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Bull Terrier&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>The <code>unshift()</code> function/method add a value/element to the beginning of an Array. &lt;br&gt;\nHere&#39;s an example.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nconsole.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>dogs.unshift(&#39;American Bulldog&#39;);\nconsole.log(dogs); // [&quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Removing elements/values from an Array</h3>\n\n<p>There&#39;s also two methods to remove values/elements from an Array where you can remove the beginning using <code>Array.prototype.shift()</code> or if you want to remove from the end you can use <code>Array.prototype.pop()</code>.</p>\n\n<p>Here&#39;s an example to remove the first element using the <code>Array.prototype.shift()</code> method.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nconsole.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>dogs.shift();\nconsole.log(dogs); // [ &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>And here&#39;s an example to remove the last element using the <code>Array.prototype.pop()</code> method.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nconsole.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>dogs.pop();\nconsole.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;];\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Ordering/Sorting elements</h3>\n\n<p>There&#39;s also two ways to order/sort an Array <code>Array.prototype.reverse()</code> which are going to do what says and <code>Array.prototype.sort()</code> to put elements in order but in this case the method <code>Array.prototype.sort()</code> turns every value in strings so if you have numbers you are going to need to pass a function and order the numbers.</p>\n\n<p>Here&#39;s an example of <code>Array.prototype.reverse()</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];\nconsole.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>dogs.reverse();\nconsole.log(dogs); // [&quot;Pitbull&quot;, &quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;];\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Here&#39;s an example of <code>Array.prototype.sort()</code> with strings.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar alphabet = [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;];\nconsole.log(alphabet); // [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;]</p>\n\n<p>alphabet.sort();\nconsole.log(alphabet); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;, &quot;f&quot;, &quot;z&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>And here&#39;s an example of how to pass a function to <code>Array.prototype.sort()</code> to order numbers.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\nconsole.log(nums) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</p>\n\n<p>nums.sort(function(n1, n2) {\n  return n1 - n2;\n});</p>\n\n<p>console.log(nums) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>Iterator methods</h3>\n\n<p>The iterator methods/functions are going to be applied for each value/element and may or may not return a new array, groups of values or just a value as result of the operation.</p>\n\n<p>First let&#39;s talk about the <code>Array.prototype.forEach()</code> which receive a callback as argument and this callback has three arguments respectively <code>element</code>, <code>index</code>, <code>array being traversed</code> going to iterate on ascending order. &lt;br&gt;\nHere&#39;s an example using <code>Array.prototype.forEach()</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>dogs.forEach(function(value, index, array) {\n    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);\n});</p>\n\n<p>// outputs\n// Dog breed: Alaskan Klee Kai, position: 0\n// Dog breed: American Bulldog, position: 1\n// Dog breed: Pitbull, position: 2 \n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>Now it&#39;s time to show the <code>Array.prototype.every()</code> which test a condition against each element and return true in case all elements meet the condition or false. &lt;br&gt;\nAlso receives a callback as argument and this callback has three arguments respectively <code>element</code>, <code>index</code>, <code>array being traversed</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n\n<p>var meetCondition = nums.every(function(element, index, array) {\n    return (element &lt; 11);\n});</p>\n\n<p>console.log(meetCondition) // true\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>In the code above all elements are tested against the condition to check if they are less than 11 in our case all elements are less than 11 so the result returned is true.</p>\n\n<p>The method/function <code>Array.prototype.some()</code> works almost the same way as <code>Array.prototype.every()</code> but in this case if at least one element meet the condition would return true.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</p>\n\n<p>var meetCondition = nums.some(function(element, index, array) {\n    return (element === 11);\n});</p>\n\n<p>console.log(meetCondition) // true\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>The <code>Array.prototype.reduce()</code> method run a function against an accumulator for each element until reduce to one single value.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar nums = [100, 200, 300, 400];</p>\n\n<p>nums.reduce(function(a, b) {\n\tconsole.log(&#39;a&#39;, a);\n   \tconsole.log(&#39;b&#39;, b);\n   \tconsole.log(&#39;result accumulated is: &#39;, a + b);\n    return a + b;\n});</p>\n\n<p>// output</p>\n\n<p>// a 100\n// b 200\n// result accumulated is: 300\n// a 300\n// b 300\n// result accumulated is: 600\n// a 600\n// b 400\n// result accumulated is: 1000\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>As you can see our method <code>Array.prototype.reduce()</code> receive a function with two arguments <code>previous value</code> and <code>current value</code> a + b which the result turns into the <code>accumulator</code> a and then calculate this result against the next in line which is b and so on so forth. &lt;br&gt;\nYou can also pass <code>initial value</code> where it&#39;s going to turn into the <code>previous value</code> and the original <code>previous value</code> turn into <code>current value</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar nums = [100, 200, 300, 400];</p>\n\n<p>nums.reduce(function(a, b) {\n\tconsole.log(&#39;a&#39;, a);\n   \tconsole.log(&#39;b&#39;, b);\n   \tconsole.log(&#39;result accumulated is: &#39;, a + b);\n    return a + b;\n}, 200);</p>\n\n<p>// output</p>\n\n<p>// a 200\n// b 100\n// result accumulated is: 300\n// a 300\n// b 200\n// result accumulated is: 500\n// a 500\n// b 300\n// result accumulated is: 800\n// a 800\n// b 400\n// result accumulated is: 1200\n// 1200\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>There&#39;s also the possibility to use <code>Array.prototype.reduceRight()</code> which is going to perform the function on each element of the array from the end to start.</p>\n\n<p>the <code>Array.prototype.map()</code> method works the same way <code>Array.prototype.forEach()</code> method works but return a new Array as the difference between the two methods.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];</p>\n\n<p>var newArr = dogs.map(function(value, index, array) {\n    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);\n    return value;\n});</p>\n\n<p>console.log(newArr);</p>\n\n<p>// outputs\n// Dog breed: Alaskan Klee Kai, position: 0\n// Dog breed: American Bulldog, position: 1\n// Dog breed: Pitbull, position: 2 </p>\n\n<p>// [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]\n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<p>The <code>Array.prototype.filter()</code> method works almost the same way as <code>Array.prototype.every()</code> but instead return an Array with the elements that met the condition <code>true</code>.</p>\n\n<p>&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;\nvar nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n\n<p>var numsLessThan5 = nums.filter(function(element, index, array) {\n    return (element &lt; 5);\n});</p>\n\n<p>console.log(numsLessThan5) // [0, 1, 2, 3, 4] \n&lt;/code&gt;&lt;/pre&gt;</p>\n\n<h3>That&#39;s it</h3>\n\n<p>I hope you have brush up on your Array knowledge being aware of we can use and will use more complex approaches applying some of the topics I covered on this post. &lt;br&gt;</p>\n\n<p>Cheers!</p>\n\n<p>&lt;small&gt;* Don&#39;t be shy. I will appreciate any improvement and/or fix.&lt;/small&gt;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Ep.2 Data Structures and Algorithms with JS - Arrays","meta_description":"This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. Notice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using on the future with more complex posts.","author_id":1}]},"meta":{"exported_on":1414434809645,"version":"000"}}